FORMAT: 1A

# Open Telematics API

## Acronyms

|       |                                                         |
|-------|---------------------------------------------------------|
| TSPs  | Telematics Service Providers                            |
| RAML  | RESTful API Modeling Language                           |
| SDKs  | Software Development Kits                               |
| OTAPI | Open Telematics API                                     |
| IVHM  | Integrated Vehicle Health Maintenance                   |
| CBM   | Condition Based Maintenance                             |
| HTTP  | Hyper Text Transfer Protocol                            |
| TLS   | Transport Layer Security                                |
| HR    | Human Resources                                         |
| PII   | Personally Identifiable Information                     |
| NIST  | National Institute of Standards and Technology          |
| URLs  | Universal Resource Locators                             |
| ISO   | International Standards Organization                    |
| IDs   | IDentifiers                                             |
| JSON  | JavaScript Object Notation                              |
| IEC   | International Electrotechnical Commission               |
| OWASP | Open Web Application Security ProjectÂ®                  |
| MASVS | OWASP Mobile Application Security Verification Standard |
| UTC   | Coordinated Universal Time                              |
| ELD   | Electronic Logging Devices                              |
| SI    | International System of Units                           |
| RODS  | Record of Duty Status                                   |
| CAN   | Controller Area Network                                 |
| YM    | Yard Move                                               |
| PC    | Personal Conveyance                                     |
| GPS   | Global Positioning System                               |
| ECU   | Electronic Control Unit                                 |
| SAE   | Society of Automotive Engineers                         |
| SPN   | Suspect Parameter Number                                |
| RPM   | revolutions per minute                                  |
| DEF   | Diesel Exhaust Fluid                                    |
| FMI   | Fault Mode Indicator                                    |
| MID   | Message InDicator                                       |
| PID   | Parameter IDentifier                                    |
| SID   | System IDentifier                                       |
| SA    | Source Address                                          |
| OBDII | On Board Diagnostics                                    |
| CMV   | Commercial Motor Vehicle                                |
| VIN   | Vehicle Identifiaction Number                           |
| ECMs  | Engine Control Modules                                  |
| MSON  | Markdown Syntax Object Notation                         |

# Open Telematics API

![NMFTA Logo](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/image1.png)

A project to enable business resiliency for motor freight carriers with tight integrations into Telematics Service Providers (TSPs).

This document is written in [API Blueprint format 1A](https://github.com/apiaryio/api-blueprint/blob/master/API%20Blueprint%20Specification.md).

The specification is pubished in various forms:

* at [github.com/nmfta-repo/nmfta-opentelematics-api](https://github.com/nmfta-repo/nmfta-opentelematics-api)
    * [`apiary.apib`](https://github.com/nmfta-repo/nmfta-opentelematics-api/blob/master/apiary.apib) -- API Blueprint specification
    * [`otapi.html`](http://htmlpreview.github.io/?https://github.com/nmfta-repo/nmfta-opentelematics-api/blob/master/otapi.html) -- standalone documentation rendering of the above
* here, [opentelematicsapi.docs.apiary.io](https://opentelematicsapi.docs.apiary.io), as:
    * Interactive documentation
    * A mock server
* at [apimatic/.../nmfta-opentelematics-api](https://www.apimatic.io/apidocs/nmfta-opentelematics-api) as:
    * Exportable API specifications in multiple formats including: Open API 3.0, RESTful API Modeling Language (RAML) 1.0, and Swagger 2.0
    * Downloadable (client) Software Development Kits (SDKs) in .NET and Python

There is also a prototype implementation of version [0.1rc4](https://github.com/nmfta-repo/nmfta-opentelematics-api/releases/tag/proto-0.1rc4) of this specificiation available at [github.com/nmfta-repo/nmfta-opentelematics-prototype](https://github.com/nmfta-repo/nmfta-opentelematics-prototype).

Finally, a questionnaire for use by motor freight carriers in assessing the degree to which a TSP provides OTAPI support is also available: [Open Telematics Supported Use Cases Questionnaire.xlsx](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/Open%20Telematics%20Supported%20Use%20Cases%20Questionnaire.xlsx)

The Open Telematics API (OTAPI) is intended to make the TSP-Carrier interface the same across multiple TSPs. It is not
intended to specify any aspects of the TSP's connections to their telematics devices. Neither does it imply any changes
to the location where data is stored or access controls on the data -- the data will still live at the Motor Freight
Carrier as-sourced from their accounts at the TSP.

If a telematics system provider (TSP) suddenly goes out of business (have had two examples of this in 2018) any
commercial fleet relying on their service will need to find a new provider. Due to the lack of a standardized
data format and methods for retrieving telematics logs & data, a commercial fleet manager will have to reintegrate an
alternate telematics provider's data format into their existing system reporting.

![OTAPI Overview](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/overview.png)

This is a standardized API for retrieving telematics logs & data. The API
specification exclusively uses JSON for request and response bodies in this
version; therefore, relies on serializations of Javacript types in JSON. e.g.
lists `[]`, dictionaries `{}` and the null value `null.` Each participating
TSP would be individually responsible for the necessary translations from
their existing formats to this Open Telematics API. Each TSP would continue
to be responsible for managing their own cloud infrastructure housing
customer data. The Open Telematics API, as an additional interface, will be
made available by TSPs to allow their customers ready access to pull data in
the standardized format, especially in examples of mixed TSP fleets. The API
could grow into Integrated Vehicle Health Maintenance (IVHM) and Conditioned
Based Maintenance (CBM) in the future via TSPs
[Extending this API](#extending_this_api).

# Contributors

This Open Telematics API was made possible through the generous contributions of thought leadership and technical expertise
of many collaborators across the heavy vehicle cyber security community, working to push the industry forward and make it
more resilient. Though some of our contributors wish to remain anonymous, we are deeply grateful to everyone who has given
their time and energy to make this a reality.


| **Fleet Managers**        | **Telematics Providers** | **Independents**                                                |
|:-------------------------:|:------------------------:|:---------------------------------------------------------------:|
| Bill Brown, SEFL          | Samsara Networks, Inc.   | Altaz Valani, Security Compass                                  |
| Penske Truck Leasing      | Geotab                   | Andrew Smith, ISE Inc.                                          |
| Old Dominion Freight Lines| Omnitracs                | Dr. Jeremy Daily, UTulsa                                        |
|                           | Derek Held, Zonar Systems|                                                                 |

![SEFL](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/SFL2c_300dpi-resized.jpg) ![ODFL](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/OD_LOGO_750x750.png) ![Samsara Networks Inc.](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/samsara_horizontal_logo_black-resized.jpg) ![Geotab](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/geotab-logo_full-colour-rgb_resized.png) ![Security Compass](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/securitycompass-logo-resized.jpg) ![ISE Inc.](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/ISE_A_Trimble_Company_RGB.png) ![Omnitracs](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/Omnitracs_logo_2015_CMYK_no_tagline.jpg) ![Zonar Systems](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/zonar-logo-RGB-750.png)

# Authentication
<a id="authentication"></a>

**All requests** to Open Telematics API endpoints **require authentication**.

For this version of the API, `v1`, all authentication must be performed using Hyper Text Transfer Protocol (HTTP) Basic. e.g.

```http
Authorization: Basic YWRtaW46YWRtaW4=
```

This authentication method relies entirely on the security protections provided by the Transport Layer Security (TLS) layer; therefore HTTPS is
mandatory on all connections and implementors must follow adhere to the security requirements detailed in the
[Security Requirements for Implementors](#security_requirements_for_implementors) section below.

TSPs implementing the Open Telematics API must provide a means to create username-password pair credentials and these
must be associated with roles (see section [Authorization](#authorization) below).

# Authorization
<a id="authorization"></a>

TSPs implementing the Open Telematics API **must include access controls for all requests**. The access controls must
restrict authorization of requests to only those roles that are assigned in the **Access Controls** tables throughout
this API specification. The tables will look like the following example:


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |Human Resources (HR)          |Safety & Compliance (S&C)         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:|`DENY/ALLOW` |`DENY/ALLOW`  |`DENY/ALLOW`|`DENY/ALLOW` |`DENY/ALLOW`   |`DENY/ALLOW`|`DENY/ALLOW`|`DENY/ALLOW`|`DENY/ALLOW`|

Each column of the **Access Controls** tables are the user *roles* to which users in the TSP's implementation will be assigned. It must be possible for clients to use usernames for Authentication (see above); these usernames will be assigned to **one role and no more than one role** each.

The definition of each role is most accurately captured by the total of all the `DENY/ALLOW` assignments to the role in the **Access Controls** tables throughout this API specification. The intent of these access controls is to separate privileges so that carriers can limit which clients have access to:

1. streaming *feeds* of objects as they are added to the TSP
2. any Personally Identifiable Information (PII)

As can be seen in the **Access Controls** tables in the requests subsections of *References* that follow, the roles
are assigned `DENY/ALLOW` such that:

| Role               | Intent of assignments in the **Access Controls** tables                                                                                 |
| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------- |
| *Vehicle Query*    | role has access only to vehicle collections queries and cannot access any PII                                                           |
| *Vehicle Follow*   | role has access to vehicle streaming feeds and queries and cannot access any PII                                                        |
| *Driver Query*     | role has access only to driver and vehicle collections queries (can access PII)                                                         |
| *Driver Follow*    | role has access to driver and vehicle streaming feeds and queries (can access PII)                                                      |
| *Driver Dispatch*  | role is allowed to update route info and send messages to drivers                                                                       |
| *Driver Duty*      | role is allowed to externaly trigger driver duty status (e.g. *Send Duty Status Changes to the TSP*)                                    |
| *HR*               | role is allowed to perform HR use cases and update Driver information                                                                   |
| *S&C*              | role is allowed to perform Safety and Compliance use cases and to update TSP portal user account username, password and enable/disable  |
| *Admin*            | role has all privileges. Intended for testing and development; should not be used in production.                                        |


# Security Manifest

The Open Telematics has been designed with security up-front. Here we capture some National Institute of Standards and Technology (NIST) 800-53 controls which are satisfied
by the present design of OTAPI, along with rationale of how each is satisfied. The intent of this section is to give some
assurance of security-by-design in the OTAPI.

***NIST 800-53 SC-6: Resource Availability / URL size should not exceed 2000 characters***

None of the Universal Resource Locators (URLs) in any of the endpoints of OTAPI will exceed a maximum of 220 characters. The longest resource path is
`/v1.0/drivers/{driverId}/availability_factors/` which would be 104 characters long if a 68 character `driverId` were
used. The endpoints have between 1 and 3 query string parameters, most are dates which are expressed in International Standards Organization (ISO) 8601 format,
24 characters long the others are opaque IDentifiers (IDs) which could be up to 68 characters long. Worst case URL length is 104 + 24 + 24 + 68 (220) characters.

***NIST 800-53 SC-6: Resource Availability / HTTP request size should not exceed 1MB limit***

All `POST`, `PUT` and `PATCH` methods in the OTAPI are specified with JSON schema blocks over-and-above API Blueprint specifications which include maximum field lengths. The maximum requests size for any of the endpoints in OTAPI is under
4K.

***NIST 800-53 SI-10: Information Input Validation / All file references should be indirect***

There are no direct file references in OTAPI; all objects are referred to by opaque identifiers and furthermore the data export API returns a URL for dereferencing and not a file.

***NIST 800-53 AC-3: Access Enforcement / Considerations: Grant privileges directly to users***

The OTAPI is designed for machine to machine communications; as such the privileges for access to OTAPI information is
granted to the motor freight carrier backend systems which integrate with OTAPI services. The privileges assigned
can be minimized, however -- see sections [Authentication](#authentication) and [Authorization](#authorization).

***NIST 800-53 AC-24: Access Control Decisions / Considerations: Security controls assigned to each request***

OTAPI requires valid authorization with each request; see section [Authentication](#authentication).

***NIST 800-53 AU-6: Audit Review, Analysis, and Reporting / Considerations: Grant privileges to specific users***

OTAPI is designed with segmented privileges and separated user roles so that privileges are granted to specific roles
and no more privilege is used than is needed. See section [Authorization](#authorization).

# Security Requirements for Implementors
<a id="security_requirements_for_implementors"></a>

All TSPs that implement an Open Telematics API instance are expected to
provide a secure service by default. In what follows we outline some
security requirements that are expected in addition to the authentication
and access control that is detailed in the sections above.

## General Security Requirements

Vendors must maintain a vulnerability response and disclosure program in
accordance with established standards such as International Organization
of Standards (ISO)/International Electrotechnical Commission (IEC)
29147:2014 (Information technology \-- Security techniques \--
Vulnerability Disclosure) and ISO/IEC 30111:2013 (Information technology
\-- Security techniques \-- Vulnerability Handling Processes).

Vendors should ensure their vulnerability response and disclosure
program conforms with the ['Legal bug bounty' safe-harbor requirements](https://github.com/EdOverflow/legal-bug-bounty)
to protect researchers and encourage the highest-quality participation.

## Open Telematics API Server Security Requirements

**TLS Configuration**

The TLS security for Open Telematics API servers is of paramount importance. All of the confidentiality and integrity
protections are relying on this layer. For this reason, Open Telematics API servers must ensure that their HTTPS / TLS
configurations are of the highest quality. Following the [Qualys SSL Labs
Guide](https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices) is reccomended.  The automated
tool, also by Qualys SSL Labs, at [https://www.ssllabs.com/ssltest/](https://www.ssllabs.com/ssltest/) will report a
'letter grade'; it is expected that TSPs will have letter grades of 'A' or higher according to that tool.

**Whitelist HTTP Methods**

This API specification (in *APIBlueprint*) has a complete list of all allowable *HTTP methods* for each resource/'end
point' of the Open Telematics API. Open Telematics server implementations should use the list of methods as a whitelist
to filter incoming requests before any additional processing.

**Rate-limit API Requests**

Since every request to the Open Telematics API must be authenticated it is possible to rate-limit Open Telematics API
requests per authenticated user. Vendors should implement rate limits on overall API requests per authenticated user,
e.g. to avoid one user exhausting server resources of others; however, vendor must not rate-limit any Open Telematics
API implementations to rates below what is offered through their other API services for telematics data. Rate-limiting
response must be implemented using response 429 and headers as detailed in this document.

**Prevent Brute-Forcing**

Authentication (for this version of the API) is tied exclusively to HTTP Basic in each request. This means that each and
every API endpoint is an opportunity to brute force any of the user credentials. Open Telematics server implementors
must enforce a global rate-limit on authentication attempts for each user. Implementors may also want to consider other
mitigations against brute-force attacks on credentials; c.f. [the Open Web Application Security ProjectÂ® (OWASP) page on Blocking Brute Force
Attacks](https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks).

**Prevent Server-Error Stacktraces**

Open Telematics server implementors must ensure that their software is deployed such that it does not include stack
traces in any response; e.g. no stacktraces in a 500 server error response.

**Prevent Resource Exhaustion by Slow-posting**

Open Telematics server implementors must ensure that, when receiving data from clients, the server implements short-
enough timeouts such that exhaustion of the server resources through malicious client 'slow-posting' is not possible.
For more details, consult this Qualys blog post https://blog.qualys.com/securitylabs/2011/11/02/how-to-protect-
against-slow-http-attacks.

**Input Sanitization**

Open Telematics server implementors must employ input sanitization when ingesting any data, i.e. for the `POST`, `PUT`,
`PATCH` methods. This API uses exclusively JSON for data serialization; therefore, at a minimum all input data should be
verified as valid JSON before being further processed. Furthermore, this specification includes generated JSON schema
for the expected inputs and so additional verification that the input JSON conforms to the expected schema can also be
performed before further processing is performed.

## Open Telematics API Client Security Requirements

**Certificate Pinning**

Because the confidentiality of credentials is only protected by TLS in this version, it is
very important that all Open Telematics API clients must be configured such that substitution of
any TLS certificates results in a failure to establish any connections
to the Open Telematics API server.

All clients must implement certificate pinning. i.e. All client implementations will pass the tests, 5.4-5.6, for
certificate pinning in the [OWASP Mobile Application Security Verification Standard (MASVS)](https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide).

# Working With Dates
<a id="working_with_dates"></a>

When exchanging dates as parameters to API methods or in responses from the API, you must ensure that
they are formatted properly as an ISO 8601 string (format
`yyyy-MM-ddTHH:mm:ss.fffZ`). In addition, all dates will have to first be
converted to Coordinated Universal Time (UTC) in order to ensure time zone information and daylight
savings times are accounted for correctly.

# Working with Time-Based Queries

There are many API endpoints which support searches of data based on a time range. In all cases, the time range specified
by a pair of `start` and `stop` parameters represents an inclusive-exclusive time range. i.e. a time period which
includes the moment in time given by `start` and all times up-to but not including the moment in time given by `stop.`

The matching performed in all of these searches will be a time-intersection. i.e. the objects will be returned in search
results if their associated time periods (however defined) have any intersection with the inclusive-exclusive time range
given by the pair of `start` and `stop` parameters.

Objects may have multiple time periods associated with them; e.g. events recorded and transmitted by TSPs may have the
times at which the event was created, when it was recorded and/or when it was made available by the TSP to the motor
freight carrier. Unless otherwise specified, the time period of objects against which matching is performed will be the
*creation times*. Furthermore, implementors are required to ensure that the creation times of any objects are preserved
through all data transfers, i.e. that the creation times are not modified after initial recording at the telematics
devices in the field.

In the special case of matching against an object with a single time field, *instantaneous events* the object will be
returned if its instantaneous time value is within the inclusive-exclusive time range given by the pair of `start` and
`stop` parameters.

# Working With Locations

When exchanging locations as parameters to API methods or in responses from the API, you must ensure that they are
formatted as a latitude+longitude pair (format `[-]aaa.aaaaaaa [-]ooo.ooooooo`). Positive in the first component,
Latitude, indicates North (N) and East (E) in the second component, Longitude.

Note that all locations assigned to objects by the TSP in the OTAPI are done so on a best-effort basis. Different TSPs
have different rates of location update, different accuracies and different means of mapping a previously known location
into events after the known location (e.g. prediction vs. interpolation). This Open Telematics API specification does not make
any specifications about how often, how accurate or any other statements about how geographic locations must be assigned
to objects by the TSP.

# Working with *Feed Follow* Queries

There are endpoints of the API which are intended to be polled by clients so that new data (data newer than the previous
query) is returned. Theses *Feed Follow* endpoints are intended to assist in real-time client applications.

In some cases, the clients require that no data is ever missed by following (polling the endpoint); however, due to the
nature of telematics systems there can be a high latency between time of creation and time of delivery to the TSP. Hence
there is a non-trivial cost associated with providing endpoints that can ensure that no data is missed in following.
e.g. the *Follow a Feed of Log Events* endpoint below.

Unless stated otherwise, all *Feed Follow* endpoints will be such that no data is missed by following; including cases
of very high latency between data creation and delivery. Special exceptions will be noted on the endpoints for the cases
where the clients require that they have the newest information and are not concerned with ensuring that no data is
missed.

# Error States

The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

# Pagination

Where requests may return large collections and where the collections to be returned are presumed to be static the API
will include support for pagination of requests. The scheme for pagination closely follows [the pagination scheme of github](https://developer.github.com/v3/#pagination).

Requests that are paginated will return 50 items by default. The `page` parameter can be used to access later pages;
it defaults to the first page, page *1*. A custom number of items can be requested with the `count` parameter.

The total number of elements available is returned in the `X-Total-Count` response header.

# Server Performance

This API is intended to be integrated into motor freight carriers back end operations systems; therefore, there are
performance requirements to be considered as well. The API has been modeled in terms of use cases by the motor freight
carriers (see below). Each of these use cases can be considered to be executing concurrently in the motor freight
carrier. This has important design implications. For example, if a motor freight carrier has 10,000 trucks and makes
requests regarding their location once a minute this would imply 10,000 method invocations per minute with a relatively
small return data point. Other methods such as vehicle histories will have larger return data sets and require more
server side processing but would not be expected to be called with a high frequency. Given that it is not possible to
understand how these methods might be used by motor freight carriers in a final implementation it is difficult to
provide concrete performance metric requirements at this stage. Instead, implementors should consider this per-truck
scaling and design accordingly. i.e. consider that fleets can have more than 100,000 trucks and that some API endpoints
in this specification will be called rapidly (1 request per minute) whereas others will be called infrequently (1
request per day).

This specification does not go into implementation specific design decisions which are up to the individual TSPs since
such decisions are heavily dependent on their architecture. It is, however, strongly recommended that the TSPs consider
building-in performance features such as request queueing and request rate limiters to provide a stable and robust
solution. It is also recommended that the TSPs provide information on the frequency of updates for data feed
subscriptions such as the vehicle feed so the consumers can make appropriate design decisions.

# Response Size Limits

Considering the volume of data which will be generated by large fleets, there will be cases where pagination is not
sufficient to limit the load on the TSP's OTAPI servers.

The TSPs implementing OTAPI may elect to return an error `413 Request Entity Too Large` when clients make queries which
would yield a response which is deemed 'too large.' The definition of 'too large' is intentionally left open so that
TSPs can configure different limits for the various endpoints and on a per-customer basis (based on e.g. tiers of
service).

Client software must be prepare to receive error `413` and to react by reducing the size of the query or ceasing the
query; client may not retry a request when receiving a `413` error. This specification lists the endpoints where clients must be
prepared for `413` responses.

# Unknown Drivers

For the elements of Open Telematics API which are concerned with Driver log events, or other driver-associated data,
there needs to be a concept of an 'unknown driver'. Indeed this concept is part of the Electronic Logging Devices (ELD) mandate. In Open Telematics
API objects: `driverID` references to the unknown driver is represented by `null`.

# Provider Identifiers
<a id="provider_identifiers"></a>

An important use case of the Open Telematics API by motor freight carriers is to run 'mixed fleets' where there are more
than one TSP's service integrated concurrently. In such a deployment we can imagine possible issues with duplicated data
or conflicts.

To prepare a solution to these problems, this specification includes provisions to identify the source of all data by a
'Provider ID'. Implementors are required to choose a unique identifier and assign it to all 'Provider ID' fields in all
data structures where it is included in this specification. We recommend that TSPs use their domain (e.g.
`api.provider.com`) which should be sufficiently unique; however, TSPs can elect to use whatever identifier they like
but it should be 1) recognizable as associated with that TSP and 2) remain constant throughout the lifetime of the TSP's
service.

# Extending This API
<a id="extending_this_api"></a>

The Open Telematics API is intended to enable motor freight carriers to be able to substitute TSPs (either concurently
or as fail-overs). This, of course, means that OTAPI must include only the most common elements of all the TSPs (so-
called Lowest Common Denominator).

However, each TSP has their own special value-add and, in some cases, the motor freight carriers would rather have
access to this special value-add via OTAPI rather than include parallel integrations with SDKs in their operations.
Unique vehicle performance data is a good example of this, where it is more useful embedded with the other events in the
TSP stream.

Thus, extensions to the API will be necessary and in preparation for this the data models specified in the current API
have been left 'open'. i.e. the addition of data fields to the definitions of the objects which are returned by OTAPI
according to this specification will not cause validation errors by clients which are following the JSON schema in this
specification.

Addition of fields to the objects must be done such that it is not possible for the new extension fields to collide with
other extensions or with future versions of the API; therefore, all fields added as extensions must be prefixed with
`x_providerid_` where `providerid` is the provider ID (see [Provider Identifiers](#provider_identifiers) for more
details).

* Adding additional field/members to the data objects, when the data is needed by a motor freight carrier IS a valid extension to the OTAPI
* Adding additional possible values to enumerations IS NOT a valid extension to the OTAPI
* Adding additional endpoints/methods IS NOT a valid extension to the OTAPI

In cases where enumerations need to be changed and additional endpoints need to be added, this should be approached by
changing the OTAPI upstream. Also, ideally, adding fields should also be done by suggesting changes upstream; in this
case, an example roadmap of the process might look like: starting with a prefixed field in the TSP extensions then
suggesting the useful fields for inclusion and review leading to a new field without a prefix.

# Localization

The Open Telematics API is ready to be used in locales other than the United States (English-speakers). To enable
display and interpretation of data in languages other English (`US`, `en_US`) implementors may provide translations of the
descriptions of the enumerated constants in the API.

The localization does not apply to units of measure. Open Telematics API will use International System of Units (SI) with the following exceptions:

* velocities where units of `km/h` are used
* [Log Event objects](#log_event_object) where units of either miles or kilometres are used (but not both)

The localization also does not apply to arbitrary strings in data objects of the API such as messages for display in
vehicles or comment fields.

Requests to [Get a Translation `GET /v1.0/i18n`](#get_a_translation_table) shall include the request header `Accept-
Language: `. If no request header is present then `Accept-Language: en` will be assumed.

Open Telematics API implementors choose which languages they will support. If the `Accept-Language: ` request header
specifies a language which is unsupported by the Open Telematics API instance, then a `406` (Not Acceptable) response
will returned. Implementors must support `Accept-Language: en` and return a complete mapping -- a sample of which is
provided below for convenience in the sample response to [`GET /v1.0/i18n`](#get_a_translation_table).

# Telematics API Use Cases by Motor Freight Carriers

The Open Telematics API is envisioned to be complete enough that motor freight carriers can use these APIs instead of
the proprietary TSP APIs -- while still connecting-to TSP-hosted servers and hence still using the same provider. In the
interest of ensuring that the APIs are _useful_ to their intended users (motor freight carriers) we will capture -- and
organize -- the API by these use cases. Each use case description in the following subsections includes links to the
API endpoints upon which the use case relies. The links can be followed to the *Reference* section for details on the
endpoint. It is the intention of the authors that each endpoint is defined to satisfy a use case and no endpoint
is introduced without a supporting use case captured here.

## Check Provider's State of Health

Users of telematics that is highly integrated into their operations need assurances of the state of health of the
Provider's services.

The IT and operations staff responsible for system uptime want to query the Open Telematics API provider (TSP) Provider
State of Health. They expect to receive either an 'all-clear' response indicating that the provider is not aware of any
issues with its services at the moment of query or some details describing the contributing factors that have led to
less than optimal operation.

To check the current state of health of the service they use

* [Check Current State of Health `GET /v1.0/health/current`](#check_current_state_of_health)

To check the past 30 days worth of states of health they use

* [Check Past 30d State of Health `GET /v1.0/health/recents`](#check_past_30d_state_of_health)

## Data Export

Motor freight carriers want to export all data from a TSP on a daily basis. Where 'all data' for the purposes of
this specification is all the data specified here and does not include any other proprietary data structures designed
and employed by the TSP. These data exports could be used by carriers to complete mandatory processes during times of
TSP outage or to restore data -- although this last potential use is _not_ a use case we aim to support in OTAPI.

To obtain a complete data export (including driver information) they use

* [Complete Telematics Export Format `GET /v1.0/export/allrecords/status{?dayOf}`](#complete_telematics_export_format).

To obtain a data export with vehicle information only (intended to be free of PII) they use

* [Vehicle-Only Telematics Export Format `GET /v1.0/export/vehiclerecords/status{?dayOf}`](#vehicle_only_telematics_export_format).

## Generate Records of Duty Status for Compliance

Motor freight carriers use telematics systems to maintain Record of Duty Status (RODS) compliance. The TSP to the
carrier will supply compliant records directly, without the need for the carrier to use the OTAPI. The carrier may use
OTAPI for RODS in the event that compliant records need to be produced when a TSP is no longer available. i.e. as a
backup process only; however, to do so will require processing and it is not expected that OTAPI data be ready for
compliance as-is. A couple examples; the `line data check` and `file data check` values will need to be calculated after
the creation of line and files in the process of creating RODS files for compliance; OTAPI will not include these
values. Also note that preparing compliance reports is a value added by TSPs; e.g. in at least one case, the ordering
used by regulators used truncated timestamps and the higher-resolution available in the TSP RODS information led to
events being out-of-order in the view of the regulators without special handling by the TSP. This is an example of the
kinds of nuances that are handled by TSPs in their service offering and OTAPI is not meant to replace that service.

Personnel responsible for compliance need to be able to create RODS based on information exported from OTAPI in the
event a TSP is no longer available.

See [Complete Telematics Export Format `GET /v1.0/export/allrecords/status{?dayOf}`](#complete_telematics_export_format) for more details on the file format
which should contain sufficient data for this use case in the array of [Log Event objects](#log_event_object).

## Driver Availability

Motor freight carriers need to understand the availability of their drivers -- within the current regulatory context of
those drivers -- so that the carrier can ensure regulatory compliance and, more importantly, driver safety.

Both personnel and semi-automated systems responsible for planning and assigning driver routes want to model the current
availability of a Driver. They have

* a [Driver object id](#driver_object) for a given driver

To calculate the current driver availability they retrieve 'driver availability factors' from which the current driver
availability can be calculated using

* [Get Driver Availability Factors `GET /v1.0/drivers/{driverId}/availability_factors/{?startTime,stopTime}`](#get_driver_availability_factors) for a given [Driver object id](#driver_object) over a given period of time

To consider also the breaks and exemption rules for driver in those logs (if they operate in regions with specific break
rules or waivers) they use

* [Get Driver Breaks and Waivers `GET /v1.0/drivers/{driverId}/breaks_and_waivers/{?startTime,stopTime}`](#get_driver_breaks_and_waivers) a given [Driver object id](#driver_object) over a given period of time

In some cases, facilities systems want to set the driver status in cases where they are on-duty but not driving. To do
this their systems send duty status changes to the TSP using

* [Update Driver Duty Status `PATCH /v1.0/drivers/{driverId}/duty_status`](#update_driver_duty_status) for a given [Driver object id](#driver_object).

## Driver Route & Directions Communication

Motor freight carriers update their Driver's destination and route during their trip. This allows them to react to
changing conditions in weather, the needs of regulatory restrictions on hours, optimizing follow-on activities after a
trip, etc.

This feature is heavily used but also is commonly offered as an add-on to the TSP service from another party.

Both personnel and semi-automated systems responsible for planning and assigning driver routes want to update the
Driver's destination and route during a trip. They have

* a [Driver object id](#driver_object) for a given driver
* a [Vehicle object id](#vehicle_object) for a given vehicle
* and because they previously [created a *Vehicle Route* `POST /v1.0/vehicles/{vehicleId}/routes`](#create_a_vehicle_route) they have both
    * a *Vehicle Route object id* and
    * an array of [Stop Geographic Details object id](#stop_geographic_details_object).

To confirm that the given driver is still available to complete the route they retrieve the driver availability factors
for the time period from the driver's start of route up until the present by using

* [Get Driver Availability Factors `GET /v1.0/drivers/{driverId}/availability_factors/{?startTime,stopTime}`](#get_driver_availability_factors) endpoint for a given [Driver object id](#driver_object) over a given period of time

To change the route they use

* [Update Vehicle Route `PUT /v1.0/vehicles/{vehicleId}/routes/{routeId}`](#update_vehicle_route) for a given [Vehicle object id](#vehicle_object) and a given *Vehicle Route object id*

To update details (entry points, notes) of the route stops they use

* [Update Stop Geographic Details `PATCH /v1.0/stops/{stopId}`](#update_stop_geographic_details) for a given [Stop Geographic Details object id](#stop_geographic_details_object)

## Driver Route & Directions Start

Motor freight carriers plan destinations and routes for their drivers and inform the drivers of the plan via the in-cab
components of a telematics system.

This feature is heavily used but also is commonly offered as an add-on to the TSP service from another party.

Both personnel and semi-automated systems responsible for planning and assigning driver routes want to inform their
drivers about their planned route before the driver starts the trip. They have

* a [Vehicle object id](#vehicle_object) for a given vehicle

To first check the vehicle for any faults or alarms in the past 24h they use

* [Get Vehicle Flagged Events `GET /v1.0/vehicles/{vehicleId}/flagged_events/{?startTime,stopTime}`](#get_vehicle_flagged_events) for a given [Vehicle object id](#vehicle_object) over a given period of time

Assuming the vehicle is good to go, then they send trip start and stop destinations to the driver along with any other
instructions (such as which trailers to take) using

* [Create a Vehicle Route `POST /v1.0/vehicles/{vehicleId}/routes`](#create_a_vehicle_route) for a given [Vehicle object id](#vehicle_object)

A successful creation of a route will yield a *Route object id* and an array of [Stop Geographic Details object id](#stop_geographic_details_object) in the response to use in further updates or modifications
to the route or stops.

## Driver Route and Directions Done

Motor freight carriers receive notifications when Drivers have completed their trip.

This feature is heavily used but also is commonly offered as an add-on to the TSP service from another party.

Both personnel and semi-automated systems responsible for planning and assigning driver routes want to be notified of a
completed trip, along with the driver information about duty on the trip. They have

* a [Driver object id](#driver_object) for a given driver
* and because they previously [created a *Vehicle Route* `POST /v1.0/vehicles/{vehicleId}/routes`](#create_a_vehicle_route) and may have optionally
[updated the driver's Route Stop `PUT /v1.0/vehicles/{vehicleId}/routes/{routeId}`](#update_vehicle_route) or [updated the *Stop Geographic Details* `PATCH /v1.0/stops/{stopId}`](#update_stop_geographic_details)
they hence have both
    * a *Vehicle Route object id* and
    * a [Stop Geographic Details object id](#stop_geographic_details_object).

To react to the route completions in 'real-time' they follow a feed using

* [Follow Fleet Log Events `GET /v1.0/event_logs/feed{?token}`](#follow_fleet_log_events) for all drivers

They mark trips completed based on matching a [Log Event object](#log_event_object) in the feed which matches a given
[Driver object id](#driver_object) and also has a status indicating that the route is complete.

At the end of trips they also query for any updates on changes to gates, access, repairs etc at the destination using

* [Get Stop Geographic Details by its ID `GET /v1.0/stops/{id}`](#get_a_stop_geographic_details_by_its_id) for a given [Stop Geographic Details object id](#stop_geographic_details_object)

## Dispatch Messaging (by Driver)

Motor freight carriers need to enable their drivers to 'call-back' to the dispatch in a timely and safe manner. To do this
they often rely on two-way messaging provided by the TSP. The drivers can create and send messages to dispatch at the
motor freight carrier by using an interface on their in-cab displays.

Both personnel and semi-automated systems responsible for drivers in the field, "Dispatch", need to be notified of new
messages. To process the incoming messages for Dispatch in 'real time' they follow a feed using

* [Follow Dispatch Messages `GET /v1.0/fleet/dispatchmessages/feed{?token}`](#follow_dispatch_messages)

## Driver Messaging by Geo-Location

Motor freight carriers use telematics systems to message their drivers for various reasons, not the least of which is to
notify the drivers of dangerous weather conditions in their area.

Personnel responsible for planning and assigning driver routes want to send messages to drivers in a particular
geographic region. They have

* a target geographic area, to which they want to send messages

To determine which vehicles presently lie within the geographic area they get the current location of all fleet vehicles
using

* [Get Fleet Latest Locations `GET /v1.0/fleet/locations/latest{?page,count}`](#get_fleet_latest_locations)

Then, for each [Vehicle object id](#vehicle_object) which lies within the geographic area they send it a message using

* [Send Message to a Vehicle `POST /v1.0/vehicles/{vehicleId}/message`](#send_message_to_a_vehicle) for a given [Vehicle object id](#vehicle_object)

## Driver Messaging by Vehicle

Motor freight carriers also message their drivers by sending messages directly to a vehicle.

Personnel responsible for planning and assigning driver routes want to send a message to a driver's vehicle. They have

* a [Vehicle object id](#vehicle_object) to which they wish to send a message

they send the vehicle a message using

* [Send Message to a Vehicle `POST /v1.0/vehicles/{vehicleId}/message`](#send_message_to_a_vehicle) for a given [Vehicle object id](#vehicle_object)

## Vehicle Location Time History Processing

Motor freight carriers use telematics fleet Location Time History for multiple 'fleet dynamics modeling' use cases such
as: Fuel Purchase Prediction, Fuel Consumption Performance Tracking, and Fleet Maintenance Planning. They have

* a target time period, over which they want to perform an analysis of fleet location time history

To perform the analysis on fleet location time history they use

* [Get Fleet Location History `GET /v1.0/fleet/locations/{?startTime,stopTime,page,count}`](#get_fleet_location_history) for a given time period

## Human Resources Process: Payroll

Motor freight carriers use telematics systems to assist in payroll processing. This enables efficiencies at scale that
are important to modern motor freight carrier operations.

Automated payroll/HR systems want to receive Log Events and convert these into payroll tracking entries.

To do create payroll tracking entries in 'real-time' they follow the feed of [Log Events](#log_event_object) using

* [Follow Fleet Log Events `GET /v1.0/event_logs/feed{?token}`](#follow_fleet_log_events) for all drivers

furthermore -- if they operate in regions with specific break rules or waivers are applicable -- they use

* [Get Driver Breaks and Waivers `GET /v1.0/drivers/{driverId}/breaks_and_waivers/{?startTime,stopTime}`](#get_driver_breaks_and_waivers) for each [Driver object id](#driver_object) in the
feed for the times of interest to the payroll tracking entries

In some cases, facilities systems want to set the driver status in cases where they are on-duty but not driving. To do
this their systems send data _to_ the TSPs using

* [Update Driver Duty Status `PATCH /v1.0/drivers/{driverId}/duty_status`](#update_driver_duty_status) endpoint for a given [Driver object id](#driver_object).

and the duty status changes are reflected in the [Follow Fleet Log Events `GET /v1.0/event_logs/feed{?token}`](#follow_fleet_log_events) endpoint.

To associate their Driver's with metadata for use by the TSP (e.g. the region of governance for duty breaks and
exemptions) they use

* [Update Driver Info `PATCH /v1.0/drivers/{driverId}`](#update_driver_info) for a given [Driver object id](#driver_object).

## Human Resources Process: Accident Report

Motor freight carriers use telematics systems to monitor their fleets for accidents.

Semi-automated systems want to receive notification of any accidents in their fleet and handle accident reports
internally according to their own processes.

To do respond to accidents in 'real-time' they follow the feed of [Log Events](#log_event_object) using

* [Follow Fleet Log Events `GET /v1.0/event_logs/feed{?token}`](#follow_fleet_log_events) for all drivers

## Carrier Custom Business Intelligence

Motor freight carriers use telematics systems for multiple, custom, business intelligence purposes where the overall
health of their fleet is considered and fed into their own proprietary models.

Automated and semi-automated analysis and reporting systems want to get the overall fleet health status for a particular
time period.

To process the fleet state over a target time period they use

* [Get Fleet Vehicle Info `GET /v1.0/fleet/infos/{?startTime,stopTime}`](#get_fleet_vehicle_info) for a given time period

To process and respond to fleet status in 'real-time' they follow a feed using

* [Follow Fleet Vehicle Info `GET /v1.0/fleet/infos/feed{?token}`](#follow_fleet_vehicle_info) for all vehicles

To follow-up with queries of the hi-resolution time history of the fleet for a given time period they use

* [Get Fleet Location History `GET /v1.0/fleet/locations/{?startTime,stopTime,page,count}`](#get_fleet_location_history) for a given time period.

## Compliance and Safety Monitoring

Motor freight carriers use telematics systems to monitor compliance and safety for their operations.

Personnel responsible for safety and compliance want to review the safety and compliance of their drivers. They have:

* a [Driver object id](#driver_object) for a given driver
* a time period of interest

To obtain the information necessary to review for safety and compliance they use

* [Get Driver Performance Summaries `GET /v1.0/drivers/{driverId}/performance_summaries/{?startTime,stopTime}`](#get_driver_performance_summaries) for a given [Driver object id](#driver_object) and for a given time period

To create, delete and modify driver login credentials that the drivers will use in the
field and to which the [Driver Performance Summary objects](#driver_performance_summary_object) are associate they use

* [Update Driver TSP Portal Account `PATCH /v1.0/drivers/{driverId}/driverportaluser`](#update_driver_tsp_portal_account) for a given [Driver object id](#driver_object)

## In-Field Maintenance & Repair

Motor freight carriers use telematics systems to plan (and react to) maintenance needs of their fleets.

Automated back-end systems at the motor freight carrier want to be notified of any vehicle issues requiring maintenance.

To determine which events require maintenance in 'real-time' they follow a feed using

* [Follow Fleet Fault Code Events `GET /v1.0/fleet/faults/feed{?token}`](#follow_fleet_fault_code_events) for all fleet vehicles

To dispatch assistance to the location of a given [Vehicle object id](#vehicle_object) -- in the event that an issue
requiring maintenance must be resolved in the field -- they obtain the most recent vehicle location using

* [Get Vehicle Location History `GET /v1.0/vehicles/{vehicleId}/locations/{?startTime,stopTime}`](#get_vehicle_location_history) for a given [Vehicle object id](#vehicle_object) over the most recent time period

## Machine-Readable Data Quality

Motor freight carriers rely on data quality properties of the service provided by TSPs and need to be able to adapt
their back-end systems depending on the various data quality properties of a given TSP's service.

To determine what the expected data qualities of the service are, they use

* [Get Data Qualities Statement `GET /v1.0/dataquality`](#get_data_qualities_statement).

## Estimating Received Data Quality

Motor freight carriers need to estimate certain data quality properties of their service for a given time period.

To gain these estimates they post-process either the complete or vehicle only records for the given time period from

* [Complete Telematics Export Format `GET /v1.0/export/allrecords/status{?dayOf}`](#complete_telematics_export_format) OR
* [Vehicle-Only Telematics Export Format `GET /v1.0/export/vehiclerecords/status{?dayOf}`](#vehicle_only_telematics_export_format)

For example, estimates of received data latency can be obtained by processing downloads from either of the above and
summarizing the difference between the created timestamps and server timestamps.

## Monitor Vehicle Status Events

Motor freight carriers need access to raw J1939 vehicle frames for various custom fleet management tasks. To process the raw frames in 'real-time' they follow a feed using

* [Follow Fleet Status Events `GET /v1.0/fleet/statusevents/feed{?token}`](#follow_fleet_status_events) for all fleet vehicles.

NB: These vehicle status events are largely *raw* J1939 data. Open Telematics API makes no requirements on how the TSP
determines what raw frames to send via this interface. It is expected that the motor freight carrier and the TSP
configure/agree-to the set of raw data via some other mechanism.

Furthermore, truck leasing companies need to have access to this raw vehicle status data via single-purpose accounts at
the motor freight carrier's TSP. i.e. the truck leasing company does not require access to any other information so the account has a
single role and no further permissions. For this, the leasing companies also use

* [Follow Fleet Status Events `GET /v1.0/fleet/statusevents/feed{?token}`](#follow_fleet_status_events) for all fleet vehicles.

## Monitor Fleet Battery Status

Motor freight carriers need to monitor the battery voltage of their fleet of vehicles.

To monitor these battery voltages in 'real time' they follow a feed using

* [Follow Fleet Performance Events `GET /v1.0/fleet/performanceevents/feed{?token}`](#follow_fleet_performance_events) for all fleet vehicles

Alternatively, the motor freight carriers may follow a feed using

* [Follow Fleet Status Events `GET /v1.0/fleet/statusevents/feed{?token}`](#follow_fleet_status_events) for all fleet vehicles.

However, the latter may require special configuration for allowing the appropriate raw Controller Area Network (CAN) frames to be sent via the
[Follow Fleet Status Events `GET /v1.0/fleet/statusevents/feed{?token}`](#follow_fleet_status_events) endpoint. Furthermore, the [Follow Fleet Status Events `GET /v1.0/fleet/statusevents/feed{?token}`](#follow_fleet_status_events)
endpoint may not produce data in as many ignition states as [Follow Fleet Performance Events `GET /v1.0/fleet/performanceevents/feed{?token}`](#follow_fleet_performance_events)
and the [Follow Fleet Performance Events `GET /v1.0/fleet/performanceevents/feed{?token}`](#follow_fleet_performance_events) may offer higher resolution on battery
voltage than [Follow Fleet Status Events `GET /v1.0/fleet/statusevents/feed{?token}`](#follow_fleet_status_events).

## Data Structures

### Open Telematics Data Model Objects (object)

All the objects that follow are forward definitions of the data object types used in the API.

Note 1: due to the way the apiary documentation renderer works, this section will not be visible when rendered there.
See the *Open Telematics Data Model* for a section designed to be rendered in apiary.

Note 2: And this object definition exists just to tell you about that limitation.

Note 3: Also, any descriptions put on these data structures will not get rendered properly, so consult the *Open
Telematics Data Model* for object descriptions as well.

### User Identifier (object)

+ userType  :                          `USERTYPE_DRIVER` (required, enum[string]) - is this user a driver or other type of user

    + Members
        + `USERTYPE_DRIVER`          - this user is a driver; the `userId` field is a `driverId`
        + `USERTYPE_SUPPORT`         - this user is support personnel; the `userId` field is an opaque identifier which is proprietary to the TSP

+ userId    :         `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver who created this log.
+ firstName :                                     `John` (string) - user first name
+ lastName  :                                      `Doe` (string) - user last name

### Annotation Log (object)

+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP.
+ userId                                                 (required, User Identifier) - The id of the driver or support personnel that created this log.
+ comment           : `note: something noteworthy`       (required, string) - The annotation text associated with the log.
+ dateTime          :             `2019-04-05T02:04:16Z` (required, string) - Date and time for this annotation log

### Compliance Location (object)

+ latitude          :                         37.4224764 (required, number) - the latitude of this location
+ longitude         :                     `-122.0842499` (required, number) - the longitude of this location
+ identifiedPlace   :                         `New York` (string) - place name of the identified geo-location
+ identifiedState   :                               `NY` (string) - state/province abbreviate of identified geo-location
+ distanceFromIdentifiedPlace :                   `5000` (number) - distance from the identified geo-location, in units given by the `distanceUnits` field
+ directionFromIdentifiedPlace :                   `NNE` (string) - cardinal direction from the identified geo-location

### Log Event (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP.
+ annotations                                            (array[Annotation Log], fixed-type) - The list of AnnotationLog(s) which are associated with this log.
+ coDrivers         : `A87FF679A2F3E71D9181A67B7542122C`, `E4DA3B7FBBCE2345D7772B0674A318D5` (array[string], fixed-type) - The list of the co-driver User(s) for this log; may only be populated in day end log events
+ vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id associated with this log.
+ userId                                                 (required, User Identifier) - The id of the driver or support personnel who created this log.
+ distanceSinceLastValidCoordinates :               17.0 (required, number) - The distance traveled since the last valid latitude, longitude pair the ELD measured with required accuracy in the ELD mandate, in units given by the `distanceUnits` field. TSPs may provide distance in miles or in kilometres but are not required to provide both.
+ distanceUnits     :              `DISTANCEUNITS_MILES` (required, enum[string]) - The units of distance used to record the `distanceSinceLastValidCoordinates` field and all other distances in the Log Event object. Units are specified in the Log Events so that the `eventDataChecksum` field can be unchangde from the value reported by a telematics device.

    + Members
        + `DISTANCEUNITS_MILES`      - distance measured in miles (mi)
        + `DISTANCEUNITS_KILOMETRES` - distance measured in kilometres (km)

+ deviceDateTime    :             `2019-04-05T02:04:16Z` (string) - Date and time from the telematics device ; will be omitted for objects not originating on a telematics device
+ serverDateTime    :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ eventDateTime     :             `2019-04-05T02:04:16Z` (required, string) - the date and time of this log event; e.g. the time when a duty status change occurs
+ editDateTime      :             `2019-04-05T02:04:16Z` (string) - The date and time this log event was edited. If the log has not been edited, this will not be set.

+ odometer          :                          283940.23 (number) - The odometer reading of the vehicle at the time of the log, in m.
+ engineHours       :                             2323.4 (number) - The total operational hours of the vehicle's engine since its inception at the time of the log.
+ location                                               (required, Compliance Location) - An object with the location information for the log data, more details than lat/long for compliance purposes
+ reducedLocationAccuracy :                        false (required, boolean) - A flag (True or False) indicating if there was reduced location accuracy at the time of this event.
+ origin            :                 `ORIGIN_AUTOMATIC` (required, enum[string]) - The Origin from where this log originated.

    + Members
        + `ORIGIN_AUTOMATIC`  - Automatic recorded by device
        + `ORIGIN_MANUAL`     - Manual entry by driver.
        + `ORIGIN_OTHERUSER`  - Other authenticated user.
        + `ORIGIN_UNASSIGNED` - Unassigned driver.

+ shipments         :                   `AB123`, `ZY789` (array[string], fixed-type) - The list of IDs or document numbers for shipments being transported at the time of the log. Required, if available, for engine powerup or engine shutdown logs.
+ trailers          :                  `Trailer 1`, `T2` (array[string], fixed-type) - The list of trailer IDs attached to the vehicle at the time of the log. Required, if available, for engine powerup or engine shutdown logs.

+ parentId          : `D6AB4B1A2E51C28CB32BFE8982D42259` (string) - The Id of the parent Log Event. Used when a Log Event is edited. When returning history, this field will be populated.
+ sequenceId        :                                 23 (required, number) - The sequence number, which is used to generate the sequence ID.
+ eventRecordStatus :                     `STATE_ACTIVE` (required, enum[string]) - The State of the Log Event record.

    + Members
        + `STATE_ACTIVE`    - The log is active and has been accepted by the driver.
        + `STATE_INACTIVE`  - The log is inactive. It has been removed or it is the modification history of a log.
        + `STATE_REJECTED`  - The log is a rejected edit request from another user.
        + `STATE_REQUESTED` - The log is a pending edit request from another user.

+ eventType         :               `EVENTTYPE_DUTY_OFF` (required, enum[string]) - The type of the Log Event, representing the driver's duty status and other states. When combined with the `reducedLocationAccuracy` field can be used to create event codes and subcodes for compliance.

    + Members
        + `EVENTTYPE_DUTY_OFF`                                              - Off-duty status.
        + `EVENTTYPE_DUTY_OFF_WT`                                           - Wait time oil well driver status.
        + `EVENTTYPE_DUTY_SB`                                               - Sleeper berth status.
        + `EVENTTYPE_DUTY_D`                                                - Drive status.
        + `EVENTTYPE_DUTY_ON`                                               - On-duty status.
        + `EVENTTYPE_INDICATION_PC`                                         - Personal conveyance driver status.
        + `EVENTTYPE_INDICATION_YM`                                         - Yard move driver status.
        + `EVENTTYPE_INDICATION_NONE`                                       - Cleared indication (e.g. no Yard Move (YM) or Personal Conveyance (PC) or any other indication)
        + `EVENTTYPE_ENGINE_POWERUP`                                        - Engine power up record.
        + `EVENTTYPE_ENGINE_SHUTDOWN`                                       - Engine shutdown record.
        + `EVENTTYPE_INTERMEDIATE`                                          - Intermediate Log Event.
        + `EVENTTYPE_DRIVER_LOGIN`                                          - User login record.
        + `EVENTTYPE_DRIVER_LOGOFF`                                         - User logout record.
        + `EVENTTYPE_MALFUNCTION_POWERCOMPLIANCE`                           - Engine power status engages ELD within 1 minute.
        + `EVENTTYPE_MALFUNCTION_ENGINESYNCCOMPLIANCE`                      - Occurs when engine information (power, motion, distance, and hours) cannot be obtained by ELD.
        + `EVENTTYPE_MALFUNCTION_TIMINGCOMPLIANCE`                          - When ELD date and time exceeds 10 minute offset from UTC.
        + `EVENTTYPE_MALFUNCTION_POSITIONINGCOMPLIANCE`                     - ELD continually fails to acquire valid position measurement.
        + `EVENTTYPE_MALFUNCTION_DATARECORDINGCOMPLIANCE`                   - Storage capacity is reached, or missing data elements exist.
        + `EVENTTYPE_MALFUNCTION_DATATRANSFERCOMPLIANCE`                    - Transfer of data fails to complete.
        + `EVENTTYPE_MALFUNCTION_OTHERCOMPLIANCE`                           - Other instances of Malfunction.
        + `EVENTTYPE_MALFUNCTION_NONE`                                      - Clear previous instances of Malfunction.
        + `EVENTTYPE_DIAGNOSTIC_POWERDATA`                                  - Power data diagnostic event
        + `EVENTTYPE_DIAGNOSTIC_ENGINESYNCDATA`                             - Engine synchronization data diagnostic
        + `EVENTTYPE_DIAGNOSTIC_MISSINGELEMENT`                             - Missing data elements.
        + `EVENTTYPE_DIAGNOSTIC_DATATRANSFERDATA`                           - Data transfer data diagnostic event
        + `EVENTTYPE_DIAGNOSTIC_UNIDENTIFIEDDRIVINGRECORDS`                 - More than 30 minutes of driving with unidentified driving.
        + `EVENTTYPE_DIAGNOSTIC_OTHER`                                      - Other identified diagnostic event
        + `EVENTTYPE_DIAGNOSTIC_NONE`                                       - Clear previous instance of Diagnostic
        + `EVENTTYPE_CERTIFICATION`                                         - Driver certification event, can be multiple -- see `certificationCount`
        + `EVENTTYPE_DEVICE_CONNECTED`                                      - System log for device power connection.
        + `EVENTTYPE_DEVICE_DISCONNECTED`                                   - System log for device power disconnection.
        + `EVENTTYPE_EXEMPTION_OFFDUTYDEFERRAL`                             - Exemption off duty deferral.
        + `EVENTTYPE_EXEMPTION_ADVERSEWEATHER`                              - Adverse weather and driving conditions exemption.
        + `EVENTTYPE_EXEMPTION_16H`                                         - Exemption 16 hour.

+ requestedEditUser                                      (User Identifier) - The ID of the non-driver, authenticated user that requested an edit to this log (i.e. has USERTYPE_SUPPORT  set).
+ certificationCount                                     (number) - a certification count asssociated with driver certification (`EVENTTYPE_CERTIFICATION`) events -- serialized into ELD Event Code, see ELD 7.20
+ verifyDateTime                                         (string) - The date and time the log was verified. If the log is unverified, this will not be set. This is the same as log certification. This will be the last certification date.
+ multidayBasis     :                                  0 (number) - Multiday basis (7 or 8) used by the motor carrier to compute cumulative duty hours
+ comment :                 `fake Log Event for testing` (string) - A textual field that may be populated with information pertaining to the creation of an ELD output file
+ eventDataChecksum                                      (required, string) - The hexidecimal value result of a bitwise exclusive OR(XOR) operation using Table 3 of the ELD mandate

### Stop Geographic Details (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP.
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ stopName          :                 `pickup place 101` (required, string) - a name for this location
+ address           :                  `13 Sycamore Ave` (string) - an optional street address
+ comment                                                (string) - an optional comment
+ location          :         ` 37.4224764 -122.0842499` (required, string) - the location of the delivery date at this stop
+ entryArea                                              (array[string], fixed-type) - optional geographic location polygon detailing the entryway area for this stop

### Vehicle Location Time (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP.
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id associated with this Location Time
+ dateTime          :             `2019-04-05T02:04:16Z` (required, string) - time
+ location          :         ` 37.4224764 -122.0842499` (required, string) - location

### Vehicle Location Time History (object)

+ data                                                   (required, array[Vehicle Location Time], fixed-type) - array of Location Times representing the vehicle's location over time.
+ timeResolution    :               `TIMERESOLUTION_MAX` (required, enum[string], fixed) - a status variable to indicate if this time history has a higher available resolution at the TSP
    + Members
        + `TIMERESOLUTION_MAX` - This is at the highest available time resolution
        + `TIMERESOLUTION_NOT_MAX` - This is not at the highest available time resolution

### Coarse Vehicle Location Time History (Vehicle Location Time History)

+ timeResolution    :           `TIMERESOLUTION_NOT_MAX` (required, enum[string], fixed) - a status variable to indicate if this time history has a higher available resolution at the TSP
    + Members
        + `TIMERESOLUTION_MAX` - This is at the highest available time resolution
        + `TIMERESOLUTION_NOT_MAX` - This is not at the highest available time resolution

### GPS Quality (enum[string])

+ `GPSQUALITY_FINELOCK` - Global Positioning System (GPS) receiver had fine lock
+ `GPSQUALITY_OTHER` - GPS receiver had fix other than fine lock

### Cruise Status (object)

+ ccSwitch          :                             false  (boolean) - cruise control switch status at time of event
+ ccSetSwitch       :                             false  (boolean) - cruise control set switch status at time of event
+ ccCoastSwitch     :                             false  (boolean) - cruise control coast switch status at time of event
+ ccClutchSwitch    :                             false  (boolean) - cruise control clutch switch status at time of event
+ ccCruiseSwitch    :                             false  (boolean) - cruise control cruise switch status at time of event
+ ccResumeSwitch    :                             false  (boolean) - cruise control resume switch status at time of event
+ ccAccelerationSwitch:                           false  (boolean) - cruise control acceleration switch status at time of event
+ ccBrakeSwitch     :                             false  (boolean) - cruise control brake switch status at time of event
+ ccSpeed           :                                 1  (number) - cruise control commanded speed at the time of event, in km/h

### Flagged Event Thresholds (object)

+ suddenThreshold:                           `3.13` (number) - the Electronic Control Unit (ECU) speed change threshold, above which a Vehicle Flagged Event of type `FLAGGEDTYPE_SUDDEN_STOP` or `FLAGGEDTYPE_SUDDEN_START` is created, in m/s/s
+ collisionThreshold:                        `12.2` (number) - the ECU speed change threshold, above which a Vehicle Flagged Event of type `FLAGGEDTYPE_COLLISION` is created, in m/s/s

### Ignition Status (enum[string])

+ `IGNITION_STATUS_ACCESSORY` - ignition accessory state
+ `IGNITION_STATUS_RUN_CONTACT` - ignition run contact state
+ `IGNITION_STATUS_CRANK_CONTACT` - ignition crank contact state
+ `IGNITION_STATUS_AID_CONTACT` - ignition aid contact state
+ `IGNITION_STATUS_OFF` - ignition off state

### Vehicle Flagged Event (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ eventStart        :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the start of the event
+ eventEnd          :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the end of the event
+ vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id associated with this event
+ eventComment      : `event type XXXX, (other details)` (string) - a free-form comment field. Can be used for e.g. identifying the type of event or other unstructured data
+ thresholds                                             (Flagged Event Thresholds) - the thresholds that were active and against which ECU speed was compared during this event
+ trigger                                                (required, enum[string]) - type flagged event
    + Members
        + `FLAGGEDTYPE_ROLL_STABILITY` - Roll stability flagged event
        + `FLAGGEDTYPE_SUDDEN_START` - Sudden start flagged event
        + `FLAGGEDTYPE_SUDDEN_STOP` - Sudden stop flagged event
        + `FLAGGEDTYPE_COLLISION` - Collision flagged event
        + `FLAGGEDTYPE_ONBOARD_RECORDING` - onboard recording flagged event

+ gpsSpeed                                               (number) - speed of vehicle at time of event, in km/h
+ gpsHeading                                             (number) - heading of vehicle according to GPS at time of event, in degrees
+ gpsQuality                                             (GPS Quality) - the GPS fix quality at the time of this event
+ ecmSpeed                                               (number) - wheel-based vehicle speed of vehicle at time of event, in km/h (based on Society of Automotive Engineers (SAE) J1939 Suspect Parameter Number (SPN) 84)
+ engineRPM                                              (number) - engine speed at time of event, in revolutions per minute (RPM)
+ accelerationPercent:                                0  (required, number) - vehicle commanded acceleration, in percent
+ seatBelts         :                               true (boolean) -  Were seat belts engaged at time of event
+ cruiseStatus                                           (optional, Cruise Status) - the cruise status at the time of this event
+ parkingBrake      :                             false  (optional, boolean) - parking brake status at time of event
+ ignitionStatus                                         (Ignition Status) - the ignition status at the time of the event
+ forwardVehicleSpeed:                                1  (required, number) - vehicle speed according to tire rotation, in km/h
+ forwardVehicleDistance:                           100  (required, number) - vehicle distance traveled since cycled, in m
+ forwardVehicleElapsed:                              2  (required, number) - vehicle forward travel elapsed time, in s
+ odometer                                               (required, number) - Odometer reading at time of event, in m based on SAE J1939 SPN 245, Total Vehicle Distance

### Region Specific Break Rules (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver with the region specific break rules.
+ activeFrom        :             `2019-04-05T02:04:16Z` (required, string) - The date and time the break rules take effect
+ activeTo          :             `2019-04-05T02:04:16Z` (string) - The date and time the break rules stop taking effect, if left blank then the rules apply in perpetuity
+ country           :                               `CA` (string) - short code for the country of the region dictating the specific break rules
+ region            :                               `ON` (string) - short code for the country's region/state/province/territory dictating the specific break rules

### Region Specific Waivers (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver with the region specific waiver.
+ country           :                               `CA` (string) - short code for the country of the region dictating the specific waiver
+ region            :                               `ON` (string) - short code for the country's region/state/province/territory dictating the specific waiver
+ waiverDay        :             `2019-04-05T02:04:16Z`  (required, string) - The date of the effect of the waiver -- time is ignored

### Performance Thresholds (object)

+ activeFrom        :             `2019-04-05T02:04:16Z` (required, string) - The date and time these thresholds take effect
+ activeTo          :             `2019-04-05T02:04:16Z` (string)           - The date and time these thresholds stop taking effect, if left blank then the rules apply in perpetuity
+ rpmOverValue                                           (number)           - the configured RPM threshold, above which engine RPM readings are considered 'over', in revolutions per minute
+ overSpeedValue                                         (number)           - the configured speed threshold, above which speed readings are considered 'over', in km/h
+ excessSpeedValue                                       (number)           - the configured speed threshold, above which the speed readings are considered 'excess', in km/h
+ longIdleValue     :                                300 (number)           - the configured time threshold, beyond which time spent in idle will be considered 'long', in seconds
+ hiThrottleValue                                        (number)           - the configured throttle threshold, above which throttle values are considered 'hi'

### Vehicle Performance Event (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ eventStart        :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the start of the event (engine start)
+ eventEnd          :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the end of the event (engine stop)
+ vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id associated with this event
+ eventComment      : `performance event type XXXX, (other details)` (string) - a free-form comment field. Can be used for e.g. identifying the type of event or other unstructured data
+ hours             :                               6.28 (required, number) - the number of hours elapsed over this Vehicle Performance Event, in hours
+ thresholds                                             (required, Performance Thresholds) - the thresholds that were active during this event
+ odometerStart                                          (required, number) - the vehicle odometer reading at the start of this event, in m
+ odometerEnd                                            (required, number) - the vehicle odometer reading at the end of this event, in m
+ engineTime                                             (required, number) - the total amount of time spent with engine on during this event, in seconds
+ movingTime                                             (required, number) - the total amount of time spent moving during this event, in seconds
+ startFuel                                              (required, number) - vehicle fuel level total (sum of both tanks if present) at start of this event
+ endFuel                                                (required, number) - vehicle fuel level total (sum of both tanks if present) at end of this event
+ brakeApplications                                      (required, number) - the total number of applications of the vehicle brakes during this event
+ engineLoadStopped                                      (required, number) - the average engine load while the vehicle was stopped during this event, in percent
+ engineLoadMoving                                       (required, number) - the average engine load while the vehicle was moving during this event, in percent
+ headlightTime                                          (number) - the total amount of time spent with headlights on during this event, in seconds
+ speedGovernorValue                                     (required, number) - this vehicles particular speed governor setting, in km/h
+ batteryVoltage                                         (number)           - the optional battery voltage reading at the end of this event
+ overRpmTime                                            (number)           - the total amount of time the vehicle spent moving while over the RPM threshold during this event, in seconds
+ overSpeedTime                                          (number)           - the total amount of time spent over the speed threshold during this event, in seconds
+ excessSpeedTime                                        (number)           - the total amount of time spent over the excess speed threshold, in seconds
+ longIdleTime                                           (number)           - the total amount of time spent in 'long' idle during this event, in seconds
+ shortIdleTime                                          (number)           - the total amount of time spent in idle (not 'long') during this event, in seconds
+ shortIdleCount                                         (number)           - the total count of times when the vehicle entered an idle state, where the idle time did not exceed the 'long' threshold
+ longIdleFuel                                           (number)           - the total amount of fuel used by the vehicle during idle times whose durations were 'long', in litres
+ shortIdleFuel                                          (number)           - the total amount of fuel used by the vehicle during idle times whose durations were not 'long', in litres
+ cruiseEvents                                           (number)           - the total count of cruise engagements during this event
+ cruiseTime                                             (number)           - the total amount of time spent in cruise during this event, in seconds
+ cruiseFuel                                             (number)           - the total amount of fuel consumed in cruise during this event, in seconds
+ cruiseDistance                                         (number)           - the total distance covered in cruise during this event, in meters
+ topGearValue                                           (number)           - this vehicle's particular top gear ratio including the transmission and axle
+ topGearTime                                            (number)           - the total amount of time spent while in top gear during this event, in seconds
+ topGearFuel                                            (number)           - the total amount of fuel consumed while in top gear during this event, in litres
+ topGearDistance                                        (number)           - the total distance covered while in top gear during this event, in meters
+ ptoFuel                                                (number)           - the total amount of fuel dispensed with 'power take off' liquid tanker trailer systems, in litres
+ ptoTime                                                (number)           - the total amount of time dispensing with 'power take off' liquid tanker trailer systems, in seconds
+ seatBeltTime                                           (number)           - the total amount of time spent with seatbelt engaged during this event, in seconds
+ particulateFilterStatus                                (enum[string])     - the regen status at the end of this event
    + Members
        + `FILTERSTATUS_REGEN_NEEDED' - Filter regen needed
        + `FILTERSTATUS_FORCED_REGEN_WILL_HAPPEN' - Filter forced regen will happen
        + `FILTERSTATUS_ACTIVE_REGEN_START' - Filter active regen started
        + `FILTERSTATUS_PASSIVE_REGEN_START' - Filter passive regen started
        + `FILTERSTATUS_ACTIVE_REGEN_END' - Filter active regen ended
        + `FILTERSTATUS_PASSIVE_REGEN_END' - Filter passive regen ended
+ exhaustFluidLevel                                      (number)           - Diesel Exhaust Fluid (DEF) additive levels at the end of this event, in litres
+ overspeedLowThrottle                                   (number)           - the total amount of time spent over the speed threshold and simultaneously below the throttle threshold, in seconds
+ overspeedHiThrottle                                    (number)           - the total amount of time spent over the speed thresshold and simultaneously above the throttle threshold, in seconds
+ overrpmLowThrottle                                     (number)           - the total amount of time the vehicle spent moving while over the rpm threshold and simultaneously below the throttle threshold, in seconds
+ overrpmHiThrottle                                      (number)           - the total amount of time the vehicle spent moving while over the rpm threshold and simultaneously above the throttle threshold, in seconds
+ lkaActive                                              (boolean)          - Lane Keep Assist active status
+ lkaDisable                                             (boolean)          - Lane Keep Assist disable switch status
+ ldwActive                                              (boolean)          - Lane Departure Warning active status
+ ldwDisable                                             (boolean)          - Lane Departure Warning disable switch status

### Vehicle Status Event (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id associated with this event
+ location          :         ` 37.4224764 -122.0842499` (required, string) - location of the vehicle at the time of this event
+ eventComment      : `event type XXXX, (other details)` (string) - a free-form comment field. Can be used for e.g. identifying the type of event or other unstructured data
+ triggeredDate     :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the fault code being triggered
+ odometer                                               (required, number) - Odometer reading at time of event, in m based on SAE J1939 SPN 245, Total Vehicle Distance
+ ignitionStatus                                         (Ignition Status) - the ignition status at the trigger time of this fault code event
+ gpsQuality                                             (required, GPS Quality) - the GPS fix quality at the trigger time of this event
+ canIdentifier     :                        `C F004 01` (required, string) - a hex-encoded string (spaces allowed) of the 29-bit J1939 CAN identifier
+ data              :          `FF FF 82 DF 1A FF FF FF` (required, string) - a hex-encoded string (spaces allowed) of the J1939 data payload

### J1708 Fault (object)

+ failureModeIdentifier                                  (required, number) - Fault Mode Indicator (FMI) from SAE J1587
+ messageIdentifier                                      (required, number) - Message InDicator (MID) from SAE J1587 (Not all trucks have J1587 encoded networks, so this is not required.)
+ parameterOrSubsystemIdType                             (required, enum[string]) - does *faultCodeParameterorSubsystemId* encode a PID or SID as defined in SAE J1587?
    + Members
        + `PIDORSID_PID` - This is a PID
        + `PIDORSID_SID` - This is a SID
+ faultCodeParameterorSubsystemId                        (required, number) - either the Parameter IDentifier (PID) or System IDentifier (SID), as in SAE J1587

### J1939 Fault (object)

+ sourceAddress                                          (required, number) - Source Address (SA) from SAE J1939
+ failureModeIdentifier                                  (required, number) - FMI from SAE J1939
+ suspectParameterNumber                                 (required, number) - SPN from SAE J1939
+ occurences                                             (required, number) - the number of occurences of this fault; `OC` from J1939

### OBDII Fault (object)

+ controllerCode                                         (required, number) - controller code. first 'letter' of standard On Board Diagnostics (OBDII) code. convert to `char` for printable value
+ diagnosticCode                                         (required, number) - remaining 'letters' of standard OBDII code. convert to hex string for printable value
+ failureType                                            (required, number) - the Failure Type Byte, as in SAE J2012

### Vehicle Fault Code Event (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id associated with this event
+ location          :         ` 37.4224764 -122.0842499` (required, string) - location of the vehicle at the time of this event
+ eventComment      : `event type XXXX, (other details)` (string) - a free-form comment field. Can be used for e.g. identifying the type of event or other unstructured data
+ triggeredDate     :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the fault code being triggered
+ clearedDate       :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the fault code being cleared
+ faultType                                              (required, enum[string]) - the type of fault: J1708 or J1939 or OBDII
    + Members
        + `FAULT_TYPE_J1708` - a fault captured from J1708 vehicle network
        + `FAULT_TYPE_J1939` - a fault captured from J1939 vehicle network
        + `FAULT_TYPE_OBDII` - a captured OBDII fault
+ j1708Fault                                             (optional, J1708 Fault) - this Vehicle Fault Code Event is captured from J1708; only non-null if faultType is `FAULT_TYPE_J1708`
+ j1939Fault                                             (optional, J1939 Fault) - this Vehicle Fault Code Event is captured from J1939; only non-null if faultType is `FAULT_TYPE_J1939`
+ obdIIFault                                             (optional, OBDII Fault) - this Vehicle Fault Code Event is captured from OBDII; only non-null if faultType is `FAULT_TYPE_OBDII`
+ urgentFlag        :                              false (required, boolean) - is the fault urgent?
+ odometer                                               (required, number) - Odometer reading at time of event, in m based on SAE J1939 SPN 245, Total Vehicle Distance
+ engineRpm                                              (required, number) - engine RPMs at time of event, in revolutions per minute (based on SAE J1939 SPN 190)
+ ecmSpeed                                               (required, number) - wheel-based vehicle speed of vehicle at time of event, in km/h (based on SAE J1939 SPN 84)
+ cruiseStatus                                           (optional, Cruise Status) - the cruise status at the trigger time of this fault code event
+ ignitionStatus                                         (Ignition Status) - the ignition status at the trigger time of this fault code event
+ gpsQuality                                             (required, GPS Quality) - the GPS fix quality at the trigger time of this event
+ clearType                                              (enum[string]) - by what means was this fault cleared
    + Members
        + `CLEARTYPE_BYSYSTEMS` - cleared by systems
        + `CLEARTYPE_MANUALLYBACKOFFICE` - cleared manually in backoffice

### Flagged Vehicle Fault Code Event (Vehicle Fault Code Event)

### Driver (object)

+ id                : `A87FF679A2F3E71D9181A67B7542122C` (required, string) - The id of this Driver object
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ username                                               (required, string) - a username of this driver
+ driverLicenseNumber                                    (required, string) - the driver's license number
+ country           :                               `CA` (required, string) - short code for the country of the region dictating the specific break rules
+ region            :                               `ON` (required, string) - short code for the country's region/state/province/territory dictating the specific break rules
+ driverHomeTerminal                                     (string) - the home terminal of the driver

### Driver Performance Summary (object)

+ id                : `C4CA4238A0B923820DCC509A6F75849B` (required, string) - The unique identifier for the specific Entity object in the system.
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ eventStart        :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the start of this driver performance summary
+ eventEnd          :             `2019-04-05T02:04:16Z` (required, string) - Date and time of the end of this driver performance summary
+ driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver for this performance summary
+ distance                                               (number) - the total distance covered during this event, in m
+ fuel                                                   (number) - the total fuel consumed during this event, in litres
+ cruiseTime                                             (number) - the total time spent with cruise control engaged during this event, in seconds
+ engineLoadPercent                                      (number) - the average engine load percent during this event
+ overRpmTime                                            (number) - the total time the driver's vehicles spent moving while above rpm threshold, in seconds
+ brakeEvents                                            (number) - the number of brake events during this event

### Vehicle (object)

+ id                : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The id of this Driver object
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when this object was received at the TSP
+ name                                                   (string) - Vehicle name
+ cmvVIN                                                 (required, string) - the Commercial Motor Vehicle (CMV) Vehicle Identifiaction Number (VIN)
+ licensePlate                                           (required, string) - the vehicle license plate

### Message Receipt (object)

+ id                : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The id of this Message receipt object
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when the message receipt was last updated in the TSP
+ subject                                                (string) - the 'subject-line' of the delivered message
+ message                                                (required, string) - the message delivered
+ sentTime          :             `2019-04-05T02:04:16Z` (required, string) - Date and time when the message was sent to the vehicle
+ deliveredTime     :             `2019-04-05T02:04:16Z` (required, string) - Date and time when the message was delivered to the vehicle
+ readTime          :             `2019-04-05T02:04:16Z` (string) - Date and time when the message was displayed to driver

### Dispatch Message (object)

+ id                : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The id of this Dispatch Message object
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ serverTime        :             `2019-04-05T02:04:16Z` (required, string) - Date and time when the Dispatch Message object was last updated in the TSP
+ subject                                                (string) - the 'subject-line' of the delivered message
+ message                                                (required, string) - the message delivered
+ sentTime          :             `2019-04-05T02:04:16Z` (required, string) - Date and time when the message was sent to Dispatch from the vehicle
+ deliveredTime     :             `2019-04-05T02:04:16Z` (required, string) - Date and time when the message was delivered to Dispatch
+ readTime          :             `2019-04-05T02:04:16Z` (string) - Date and time when the message was displayed to Dispatch

### Token Translation (object)

+ origin :                `Log Event, malfunction` (string) - optional note of origin of token to be translated
+ comment : `Diagnostic, information for understanding sources of problems` (string) - optional comment for translators
+ msgid :                             `STATE_DIAGNOSTIC` (required, string) - The token which will be translated
+ msgstr :                                  `Diagnostic` (required, string) - The locale's representation (translation) of the token

### Data Qualities (object)

+ providerId        :                 `api.provider.com` (required, string) - the unique 'Provider ID' of the TSP
+ locationPrecision :                                 20 (required, string) - the location precision in meters of radius of precision
+ samplingMethod    :                `SAMPLING_PERIODIC` (required, enum[string]) - the sampling method of the TSP; either regular/periodic sampling or change/event based sampling
    + Members
        + `SAMPLING_PERIODIC` - regular/periodic sampling
        + `SAMPLING_CHANGE` - change/event based sampling
+ sampleRate        :                                100 (number) - the sample rate (in the case of `SAMPLING_PERIODIC`) in Hz
+ latency           :                              0.010 (required, number) - the expected latency of delivery of an event/object from the telematics device to the motor freight carrier via OTAPI, in seconds
+ vehicleSpeedSource:                 `SPEED_SOURCE_ECM` (required, enum[string]) - the source of vehicle speed in this TSP
    + Members
        + `SPEED_SOURCE_ECM` - the vehicle speed reported in TSP data is from the Engine Control Modules (ECMs) of the vehicle
        + `SPEED_SOURCE_GPS` - the vehicle speed reported in TSP data is from GPS

### State of Health (object)

+ id                : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The id of this Message receipt object
+ providerId        :                 `api.provider.com` (required, string) - The unique 'Provider ID' of the TSP
+ dateTime:    `2019-04-05T02:04:16Z`                    (required, string) - Date and time of this service status (this is 'serverTime')
+ serviceStatus:        `SERVICESTATUS_OPERATIONAL`      (required, enum[string]) - the current status of the service
    + Members
        + `SERVICESTATUS_OPERATIONAL` - the service is operational
        + `SERVICESTATUS_DEGRADED_PERFORMANCE` - the service is operating, but with limitations
        + `SERVICESTATUS_PARTIAL_OUTAGE` - there are aspects of the service which are not presently available
        + `SERVICESTATUS_MAJOR_OUTAGE` - the service is unavailable
+ factors: `upstream server operational`, `authentication service operational` (array[string], fixed-type) - a list of contributing factors to the current service status. Providers may use this to communicate details about loss of service

### Vehicle Only Complete Telematics Records (object)

+ stopGeographicDetails                                  (array[Stop Geographic Details], fixed-type) - All of the Stop Geographic Details objects known to the TSP at the time of the request
+ vehicles                                               (array[Vehicle], fixed-type) - All of the Vehicle objects known to the TSP at the time of the request
+ vehicleLocationTimeHistories                           (Vehicle Location Time History, fixed-type) - Any of the Vehicle Location Time History objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ vehicleFlaggedEvents                                   (array[Vehicle Flagged Event], fixed-type) - Any of the Vehicle Flagged Event objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ vehiclePerformanceEvents                               (array[Vehicle Performance Event], fixed-type) - Any of the Vehicle Performance Event objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ flaggedVehicleFaultEvents                              (array[Flagged Vehicle Fault Code Event], fixed-type) - Any of the Flagged Vehicle Fault Code Event objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ vehicleStatusEvents                                    (array[Vehicle Status Event], fixed-type) - Any of the Vehicle Status Event objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ vehicleFaultCodeEvents                                 (array[Vehicle Fault Code Event], fixed-type) - Any of the Vehicle Fault Code Event objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ stateOfHealths                                         (array[State of Health], fixed-type) - Any of the State of Health objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period

### Complete Telematics Records (Vehicle Only Complete Telematics Records)

+ drivers                                                (array[Driver], fixed-type) - All of the Driver objects known to the TSP at the time of the request
+ annotationLogs                                         (array[Annotation Log], fixed-type) - Any of the Annotation Log objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ logEvents                                              (array[Log Event], fixed-type) - Any of the Log Event objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ regionSpecificBreakRules                               (array[Region Specific Break Rules], fixed-type) - Any of the Region Specific Break Rules objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ regionSpecificWaivers                                  (array[Region Specific Waivers], fixed-type) - Any of the Region Specific Waivers objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ driverPerformanceSummaries                             (array[Driver Performance Summary], fixed-type) - Any of the Driver Performance Summary objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ dispatchMessages                                       (array[Dispatch Message], fixed-type) - Any of the Dispatch Message objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period
+ displayMessageReceipts                                 (array[Message Receipt], fixed-type) - Any of the Message Receipt objects known to the TSP at the time of the request whose associated time periods have an intersection with the requested time period

## Data Structures

### Open Telematics TSP Inbound Objects (object)

The objects below are forward definitions of the data object types used in sending data to the TSP in the API. These
objects do not need to have unique identification because they are processed by the server into changes to existing
objects or creating new objects. Because these are inbound objects, extra attention should be paid to restricting the
allowable space of values in these objects to enable robust input sanitization by implementors.

Note 1: due to the way the apiary documentation renderer works, this section will not be visible when rendered there.
See the *Open Telematics Data Model* for a section designed to be rendered in apiary.

Note 2: And this object definition exists just to tell you about that limitation.

Note 3: Also, any descriptions put on these data structures will not get rendered properly, so consult the *Open
Telematics Data Model* section for object descriptions as well.

Note 4 (who's counting these anyways?): as these are inbound objects we want lock-down the space of all possible
serializations to make the input processing of the server more robust. e.g. specifying content restrictions for strings
that should only contain timestamps. APIBlueprint doesn't provide a way to do this in Markdown Syntax Object Notation (MSON); but it is possible to add a
JSON Schema to an action which overrides the JSON schema generated from the MSON. So, whereas these data structures
define the data types used for inbound objects, there is also corresponding JSON Schemas for endpoints accepting these
data type defined below. If you change one you should probably also change the other.

Note 5: WARNING, changes to the objects here require also changing the explicit JSON Schema sections added to the
endpoint `Request`s in the API Blueprint that follows.

### Externally Sourced Route Stop Details (object)

+ stopName          :                 `pickup place 101` (required, string) - a name for the stop location
+ stopAddress       :                  `13 Sycamore Ave` (string) - an optional street address
+ stopLocation      :         ` 37.4224764 -122.0842499` (required, string) - the location of the stop
+ stopDeadline      :             `2019-04-05T02:04:16Z` (string) - optional time and date when the stop must be arrived at

### Externally Sourced Route Stops (object)

+ stops                                                   (required, array[Externally Sourced Route Stop Details], fixed-type) - the stops for the route

### Externally Sourced Route Start Details And Stops (Externally Sourced Route Stops)

+ startName         :                  `start place 202` (required, string) - a name for the start location
+ startAddress      :                    `11 Elm Street` (string) - an optional street address of the start
+ startLocation     :         ` 37.4224764 -122.0842499` (required, string) - the location of the start
+ routeAddInstructions :     `take trailers XXX and YYY` (string) - an optional comment with details about the route

### Externally Sourced Vehicle Display Messages (object)

+ subject                                                (string) - a brief 'subject-line' for this message
+ message                                                (required, string) - the message to be displayed to the driver. This string can contain any characters valid in JSON including unicode characters. The TSP must filter characters that are illegal for transport or display in their systems.

### Externally Sourced Stop Geographic Details (object)

+ comment                                                (string) - an optional comment
+ location          :         ` 37.4224764 -122.0842499` (required, string) - the location of the delivery date at this stop
+ entryArea                                              (array[string], fixed-type) - optional geographic location polygon detailing the entryway area for this stop

### Externally Triggered Duty Status Change (object)

+ dateTime          :             `2019-04-05T02:04:16Z` (required, string) - Date and time for this status change
+ location          :         ` 37.4224764 -122.0842499` (required, string) - An object with the location information for this status change.
+ status            :                `EXTTRIG_STATUS_ON` (required, enum[string]) - The status changed-to in this status change
    + Members
        + `EXTTRIG_STATUS_ON`  - The driver has changed status to on-duty
        + `EXTTRIG_STATUS_OFF` - The driver has changed status to off-duty

### Externally Sourced Driver Info (object)

+ timeOnDuty        :                                1.5 (number) - the hours worked on-duty by this user so far today
+ timeDriving       :                                1.5 (number) - the hours worked driving by this user so far today
+ timePersonalConveyance:                            1.5 (number) - the hours in personal conveyance by this user so far today
+ timeYardMove      :                                1.5 (number) - the hours worked in yard moves by this user so far today
+ driverLicenseNumber                                    (string) - the driver's license number
+ country           :                               `CA` (string) - short code for the country of the driver's license
+ region            :                               `ON` (string) - short code for the country's region/state/province/territory of the driver's license
+ driverHomeTerminal                                     (string) - the home terminal of the driver

### External TSP Portal User Management (object)

+ username          :                             `joe2` (string) - TSP portal username
+ password                                               (string) - user password
+ enabled           :                             `true` (boolean) - this user is enabled or disabled


# Group Vehicle

## Create a Vehicle Route                                     [POST /v1.0/vehicles/{vehicleId}/routes]
<a id="create_a_vehicle_route"></a>

Clients can request the creation of a new route for a given vehicle, providing start & stop location along with
additional instructions.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id to associate this route to

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

    + Attributes (Externally Sourced Route Start Details And Stops)

    + Schema

            {
              "type": "object",
              "properties": {
                "stops": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "stopName": {
                        "type": "string",
                        "description": "a name for the stop location",
                        "example": "pickup place 101",
                        "maxLength": 200
                      },
                      "stopAddress": {
                        "type": "string",
                        "description": "an optional street address",
                        "example": "13 Sycamore Ave",
                        "maxLength": 200
                      },
                      "stopLocation": {
                        "type": "string",
                        "description": "the location of the stop",
                        "example": "37.4224764 -122.0842499",
                        "maxLength": 26,
                        "pattern": "^([-+]?\\d{1,2}[.]\\d+)\\s+([-+]?\\d{1,3}[.]\\d+)$"
                      },
                      "stopDeadline": {
                        "type": "string",
                        "description": "optional time and date when the stop must be arrived at",
                        "example": "2019-04-05T02:04:16Z",
                        "maxLength": 20,
                        "pattern": "^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})$"
                      }
                    },
                    "required": [
                      "stopName",
                      "stopLocation"
                    ]
                  },
                  "description": "the stops for the route"
                },
                "startName": {
                  "type": "string",
                  "description": "a name for the start location",
                  "example": "start place 202",
                  "maxLength": 200
                },
                "startAddress": {
                  "type": "string",
                  "description": "an optional street address of the start",
                  "example": "11 Elm Street",
                  "maxLength": 200
                },
                "startLocation": {
                  "type": "string",
                  "description": "the location of the start",
                  "example": "37.4224764 -122.0842499",
                  "maxLength": 26,
                  "pattern": "^([-+]?\\d{1,2}[.]\\d+)\\s+([-+]?\\d{1,3}[.]\\d+)$"
                },
                "routeAddInstructions": {
                  "type": "string",
                  "description": "an optional comment with details about the route",
                  "example": "take trailers XXX and YYY",
                  "maxLength": 200
                }
              },
              "required": [
                "stops",
                "startName",
                "startLocation"
              ],
              "$schema": "http://json-schema.org/draft-04/schema#"
            }

+ Response 201 (application/json)

    + Attributes (object)
        + routeId       : `c6d2ff2e69c212d4eb9d64b629a46689` (required, string) - the id of the route created, to be used for later updates to the route
        + stopIds       : `b4655ce13cb3e137013d852bd7d687ae`, `ccddb6244c28fdb9bfa726cc3e34a0eb` (required, array[string], fixed-type) - the id of the stop in the created route (most likely a re-used location), to be use for later updates to Stop Geographic Details

+ Response 204

+ Response 404 (text/plain)

        Error: vehicleId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Update Vehicle Route                                        [PUT /v1.0/vehicles/{vehicleId}/routes/{routeId}]
<a id="update_vehicle_route"></a>

Clients can update a Driver's destination; sending data to this endpoint, using a previously obtained `routeId` will
change the destination of the route, hence also changing the stopId associated with the route.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id to associate this route to
    + routeId           : `c6d2ff2e69c212d4eb9d64b629a46689` (required, string) - the id of the route created, to be used for later updates to the route

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

    + Attributes (Externally Sourced Route Stops)

    + Schema

            {
              "type": "object",
              "properties": {
                "stops": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "stopName": {
                        "type": "string",
                        "description": "a name for the stop location",
                        "example": "pickup place 101",
                        "maxLength": 200
                      },
                      "stopAddress": {
                        "type": "string",
                        "description": "an optional street address",
                        "example": "13 Sycamore Ave",
                        "maxLength": 200
                      },
                      "stopLocation": {
                        "type": "string",
                        "description": "the location of the stop",
                        "example": "37.4224764 -122.0842499",
                        "maxLength": 26,
                        "pattern": "^([-+]?\\d{1,2}[.]\\d+)\\s+([-+]?\\d{1,3}[.]\\d+)$"
                      },
                      "stopDeadline": {
                        "type": "string",
                        "description": "optional time and date when the stop must be arrived at",
                        "example": "2019-04-05T02:04:16Z",
                        "maxLength": 20,
                        "pattern": "^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})$"
                      }
                    },
                    "required": [
                      "stopName",
                      "stopLocation"
                    ]
                  },
                  "description": "the stops for the route"
                }
              },
              "required": [
                "stops"
              ],
              "$schema": "http://json-schema.org/draft-04/schema#"
            }

+ Response 200 (application/json)

    + Attributes (object)
        + routeId       : `c6d2ff2e69c212d4eb9d64b629a46689` (required, string) - the id of the route updated, to be used for later updates to the route
        + stopIds       : `b4655ce13cb3e137013d852bd7d687ae`, `ccddb6244c28fdb9bfa726cc3e34a0eb` (required, array[string], fixed-type) - the id of the stop in the created route (most likely a re-used location), to be use for later updates to Stop Geographic Details

+ Response 204

+ Response 404 (text/plain)

        Error: vehicleId or routeId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Update Stop Geographic Details                           [PATCH /v1.0/stops/{stopId}]
<a id="update_stop_geographic_details"></a>

Clients can update the _geographic details_ of a stop; the *Stop Geographic Details* are the specific location for the
truck and trailer to park and a polygon of geographic points indicating the entryway onto a facility (i.e. where the
truck should drive on approach).

Sending data to this endpoint, using a previously returned `stopId` will update the Geographic details of the stop and
any other routes using this stop will also be updated.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + stopId           : `b4655ce13cb3e137013d852bd7d687ae` (required, string) - The stop id to update

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

    + Attributes (Externally Sourced Stop Geographic Details)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "ExternallySourcedStopGeographicDetails",
                "required": [
                  "location"
                ],
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "an optional comment",
                    "maxLength": 200
                  },
                  "location": {
                    "type": "string",
                    "description": "the location of the delivery date at this stop",
                    "example": "37.4224764 -122.0842499",
                    "maxLength": 26,
                    "pattern": "^([-+]?\\d{1,2}[.]\\d+)\\s+([-+]?\\d{1,3}[.]\\d+)$"
                  },
                  "entryArea": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "37.4224764 -122.0842499",
                      "maxLength": 26,
                      "pattern": "^([-+]?\\d{1,2}[.]\\d+)\\s+([-+]?\\d{1,3}[.]\\d+)$"
                    },
                    "description": "optional geographic location polygon detailing the entryway area for this stop",
                    "maxItems": 200
                  }
                }
            }

+ Response 200 (application/json)

    + Attributes (object)
        + stopId        : `b4655ce13cb3e137013d852bd7d687ae` (required, string) - the id of the stop that was updated, to be used for later updates to Stop Geographic Details

+ Response 204

+ Response 404 (text/plain)

        Error: stopId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Send Message to a Vehicle                                  [POST /v1.0/vehicles/{vehicleId}/message]
<a id="send_message_to_a_vehicle"></a>

This message can contain any characters, including unicode and non-printables (since the JSON object can have escaped
characters in its string). The TSP must filter characters that are illegal for transport or display in their systems.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id to send the message to

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

    + Attributes (Externally Sourced Vehicle Display Messages)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "ExternallySourcedVehicleDisplayMessages",
                "required": [
                  "message"
                ],
                "type": "object",
                "properties": {
                  "subject": {
                    "type": "string",
                    "description": "a brief 'subject-line' for this message",
                    "maxLength": 200
                  },
                  "message": {
                    "type": "string",
                    "description": "the message to be displayed to the driver",
                    "maxLength": 200
                  }
                }
            }

+ Response 201 (application/json)
    + Attributes (object)
        + messageReceiptId:   `FC5E038D38A57032085441E7FE7010B0` (required, string) - the id of the Message Receipt object that will track the delivery- and option display-timestamps of this message

+ Response 204

+ Response 404 (text/plain)

        Error: vehicleId not found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Get Vehicle Flagged Events                                  [GET /v1.0/vehicles/{vehicleId}/flagged_events/{?startTime,stopTime}]
<a id="get_vehicle_flagged_events"></a>

Clients can retrieve all the flagged vehicle events of a given vehicle over a given period of time.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id to associate this route to
    + startTime:`2019-04-05T02:04:16Z` (required, string) - the start-date of the search
    + stopTime: `2019-04-05T02:04:16Z` (required, string) - the stop-date of the search

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + data (array[Vehicle Flagged Event], fixed-type)

+ Response 400 (text/plain)

        Error: startTime or stopTime parameters invalid

+ Response 404 (text/plain)

        Error: vehicleId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Get Vehicle Location History                                [GET /v1.0/vehicles/{vehicleId}/locations/{?startTime,stopTime}]
<a id="get_vehicle_location_history"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + vehicleId         : `21232F297A57A5A743894A0E4A801FC3` (required, string) - The vehicle id to associate this route to
    + startTime:`2019-04-05T02:04:16Z` (required, string) - the start-date of the search
    + stopTime: `2019-04-05T02:04:16Z` (required, string) - the stop-date of the search

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Vehicle Location Time History)

+ Response 400 (text/plain)

        Error: startTime or stopTime parameters invalid

+ Response 404 (text/plain)

        Error: vehicleId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

# Group Fleet

## Follow Fleet Log Events                                     [GET /v1.0/event_logs/feed{?token}]
<a id="follow_fleet_log_events"></a>

Clients can follow a feed of Log Event entries as they are added to the TSP system; following is accomplished via
polling an endpoint and providing a 'token' which evolves the window of new entries with each query in the polling.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | ALLOW       | ALLOW         | **DENY**   |    ALLOW   | **DENY**   | ALLOW      |

+ Parameters
    + token: `37A6259CC0C1DAE299A7866489DFF0BD` (string, optional) - a since-token, pass-in the token previously returned to 'follow' new Log Events; pass in a `null` or omit this token to start with a new token set to 'now'.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + token                                 (string) - a since-token, pass-in the token previously returned by GET of `feed` to 'follow' new Log Events
        + feed                                  (array[Log Event], fixed-type) - the 'feed' of Log Events

+ Response 400 (text/plain)

        Error: token parameter invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Get Fleet Latest Locations                                  [GET /v1.0/fleet/locations/latest{?page,count}]
<a id="get_fleet_latest_locations"></a>

Clients can retrieve the (coarse) vehicle locations (of all vehicles) over a given time period.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + page                             (optional, number) - the page to select for paginated response
        + Default: 1
    + count                            (optional, number) - the number of items to return
        + Default: 50

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Headers

            X-Total-Count: {+totalCount}

    + Attributes (Vehicle Location Time History)

+ Response 400 (text/plain)

        Error: page or count parameters invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Get Fleet Location History                                  [GET /v1.0/fleet/locations/{?startTime,stopTime,page,count}]
<a id="get_fleet_location_history"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + startTime:`2019-04-05T02:04:16Z` (required, string) - the start-date of the search
    + stopTime: `2019-04-05T02:04:16Z` (required, string) - the stop-date of the search
    + page                             (optional, number) - the page to select for paginated response
        + Default: 1
    + count                            (optional, number) - the number of items to return
        + Default: 50


+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Headers

            X-Total-Count: {+totalCount}

    + Attributes (Vehicle Location Time History)

+ Response 400 (text/plain)

        Error: startTime, stopTime, page or count parameters invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Get Fleet Vehicle Info                                      [GET /v1.0/fleet/infos/{?startTime,stopTime}]
<a id="get_fleet_vehicle_info"></a>

Clients can retrieve a combination of all vehicle information for all vehicles over a given time period.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + startTime:`2019-04-05T02:04:16Z` (required, string) - the start-date of the search
    + stopTime: `2019-04-05T02:04:16Z` (required, string) - the stop-date of the search

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + coarseVehicleLocationTimeHistories                 (required, Coarse Vehicle Location Time History) - The Coarse Vehicle Location Time History for all vehicles in the requested time period
        + flaggedVehicleFaultEvents                          (required, array[Flagged Vehicle Fault Code Event], fixed-type) - all Flagged Vehicle Fault Code Events for all vehicles in the requested time period
        + vehiclePerformanceEvents                           (required, array[Vehicle Performance Event], fixed-type) - all vehicle performance events for all vehicles in the requested time period
        + vehicleFaultCodeEvents                             (required, array[Vehicle Fault Code Event], fixed-type) - all vehicle fault code events for all vehicles in the requested time period

+ Response 400 (text/plain)

        Error: startTime or stopTime parameters invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Follow Fleet Vehicle Info                                   [GET /v1.0/fleet/infos/feed{?token}]
<a id="follow_fleet_vehicle_info"></a>

Clients can follow a feed of a combination of all vehicle information for all vehicles as they are added to the TSP
system; following is accomplished via polling an endpoint and providing a 'token' which evolves the window of new
entries with each query in the polling.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | ALLOW        | **DENY**   | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + token: `37A6259CC0C1DAE299A7866489DFF0BD` (string, optional) - a since-token, pass-in the token previously returned to 'follow' new Vehicle Info objects; pass in a `null` or omit this token to start with a new token set to 'now'.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + token                                 (string) - a since-token, pass-in the token previously returned by GET of `feed` to 'follow' new Vehicle Info objects
        + feed                                  (object) - the 'feed' of Fleet Vehicle Info
            + coarseVehicleLocationTimeHistories                 (required, Coarse Vehicle Location Time History) - The Coarse Vehicle Location Time History for all vehicles in the requested time period
            + flaggedVehicleFaultEvents                          (required, array[Flagged Vehicle Fault Code Event], fixed-type) - all Flagged Vehicle Fault Code Events for all vehicles in the requested time period
            + vehiclePerformanceEvents                           (required, array[Vehicle Performance Event], fixed-type) - all vehicle performance events for all vehicles in the requested time period
            + vehicleFaultCodeEvents                             (required, array[Vehicle Fault Code Event], fixed-type) - all vehicle fault code events for all vehicles in the requested time period

+ Response 400 (text/plain)

        Error: token parameter invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Follow Fleet Fault Code Events                              [GET /v1.0/fleet/faults/feed{?token}]
<a id="follow_fleet_fault_code_events"></a>

Clients can follow a feed of Vehicle Fault Code Events as they are added to the TSP system; following is accomplished
via polling an endpoint and providing a 'token' which evolves the window of new entries with each query in the polling.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | ALLOW        | **DENY**   | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + token: `37A6259CC0C1DAE299A7866489DFF0BD` (string, optional) - a since-token, pass-in the token previously returned to 'follow' new Fault Code Events; pass in a `null` or omit this token to start with a new token set to 'now'.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + token                                 (string) - a since-token, pass-in the token previously returned by GET of `feed` to 'follow' new Fault Code Events
        + feed                                  (array[Vehicle Fault Code Event], fixed-type) - the 'feed' of Log Events

+ Response 400 (text/plain)

        Error: token parameters invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Follow Fleet Status Events                              [GET /v1.0/fleet/statusevents/feed{?token}]
<a id="follow_fleet_status_events"></a>

Clients can follow a feed of Vehicle Status Events as they are added to the TSP system; following is accomplished via
polling an endpoint and providing a 'token' which evolves the window of new entries with each query in the polling.

These vehicle status events are largely *raw* J1939 data. Open Telematics API makes no requirements on how the TSP
determines what raw frames to send via this interface. It is expected that the motor freight carrier and the TSP
configure/agree-to the set of raw data via some other mechanism.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | ALLOW        | **DENY**   | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + token: `37A6259CC0C1DAE299A7866489DFF0BD` (string, optional) - a since-token, pass-in the token previously returned to 'follow' new Status Events; pass in a `null` or omit this token to start with a new token set to 'now'.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + token                                 (string) - a since-token, pass-in the token previously returned by GET of `feed` to 'follow' new Status Events
        + feed                                  (array[Vehicle Status Event], fixed-type) - the 'feed' of Log Events

+ Response 400 (text/plain)

        Error: token parameters invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}


## Follow Fleet Performance Events                              [GET /v1.0/fleet/performanceevents/feed{?token}]
<a id="follow_fleet_performance_events"></a>

Clients can follow a feed of Vehicle Performance Events as they are added to the TSP system; following is accomplished via
polling an endpoint and providing a 'token' which evolves the window of new entries with each query in the polling.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | ALLOW        | **DENY**   | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + token: `37A6259CC0C1DAE299A7866489DFF0BD` (string, optional) - a since-token, pass-in the token previously returned to 'follow' new Performance Events; pass in a `null` or omit this token to start with a new token set to 'now'.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + token                                 (string) - a since-token, pass-in the token previously returned by GET of `feed` to 'follow' new Performance Events
        + feed                                  (array[Vehicle Performance Event], fixed-type) - the 'feed' of Performance Events

+ Response 400 (text/plain)

        Error: token parameters invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}


## Follow Dispatch Messages                                     [GET /v1.0/fleet/dispatchmessages/feed{?token}]
<a id="follow_dispatch_messages"></a>

Clients can follow a feed of Dispatch Message objects as they are added to the TSP system; following is accomplished via
polling an endpoint and providing a 'token' which evolves the window of new entries with each query in the polling.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | ***DENY***   | **DENY**   | ALLOW       | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + token: `37A6259CC0C1DAE299A7866489DFF0BD` (string, optional) - a since-token, pass-in the token previously returned to 'follow' new Dispatch Message objects; pass in a `null` or omit this token to start with a new token set to 'now'.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + token                                 (string) - a since-token, pass-in the token previously returned by GET of `feed` to 'follow' new Dispatch Message objects
        + feed                                  (array[Dispatch Message], fixed-type) - the 'feed' of Dispatch Message objects

+ Response 400 (text/plain)

        Error: token parameters invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}



# Group Driver

## Get Driver Availability Factors                             [GET /v1.0/drivers/{driverId}/availability_factors/{?startTime,stopTime}]
<a id="get_driver_availability_factors"></a>

Clients can request all the factors contributing to driver availability for a given driver, over a given time period.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver who created this status change.
    + startTime:`2019-04-05T02:04:16Z` (required, string) - the start-date of the search
    + stopTime: `2019-04-05T02:04:16Z` (required, string) - the stop-date of the search

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + logEvents                                          (required, array[Log Event], fixed-type) - The Log Events of the requested `driverId` for the requested time period [`start`, `stop`)
        + vehicleFlaggedEvents                               (required, array[Vehicle Flagged Event], fixed-type) - All Vehicle Flagged Events which are associated with the requested `driverId` and which occur within the requested time period [`start`, `stop`)
        + coarseVehicleLocationTimeHistory                   (required, Coarse Vehicle Location Time History) - The Coarse Vehicle Location Time History associated with the requested `driverId` for the requested time period [`start`, `stop`)

+ Response 400 (text/plain)

        Error: startTime or stopTime parameters invalid

+ Response 404 (text/plain)

        Error: driverId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Get Driver Breaks and Waivers                               [GET /v1.0/drivers/{driverId}/breaks_and_waivers/{?startTime,stopTime}]
<a id="get_driver_breaks_and_waivers"></a>

Clients can request any region-specific waivers and break-rules for a given driver that are applicable within a given
time period.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | **DENY**      | **DENY**   | ALLOW      | **DENY**   | ALLOW      |

+ Parameters
    + driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver who created this status change.
    + startTime:`2019-04-05T02:04:16Z` (required, string) - the start-date of the search
    + stopTime: `2019-04-05T02:04:16Z` (required, string) - the stop-date of the search

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + breakRules                                             (required, array[Region Specific Break Rules], fixed-type) - the Region Specific Break Rules for this driver for the requested time period
        + waivers                                                (required, array[Region Specific Waivers], fixed-type) - the Region Specific Waivers for this driver for the requested time period

+ Response 400 (text/plain)

        Error: startTime or stopTime parameters invalid

+ Response 404 (text/plain)

        Error: driverId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Update Driver Duty Status                                 [PATCH /v1.0/drivers/{driverId}/duty_status]
<a id="update_driver_duty_status"></a>

Clients can send custom-integrated duty status changes to the TSP to trigger duty status changes for a given driver by pushing data to this endpoint.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    | **DENY**      | ALLOW      | **DENY**   | **DENY**   | ALLOW      |

+ Parameters
    + driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver who created this status change.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

    + Attributes (Externally Triggered Duty Status Change)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "ExternallyTriggeredDutyStatusChange",
                "required": [
                  "dateTime",
                  "location",
                  "status"
                ],
                "type": "object",
                "properties": {
                  "dateTime": {
                    "type": "string",
                    "description": "Date and time for this status change",
                    "example": "2019-04-05T02:04:16Z",
                    "maxLength": 20,
                    "pattern": "^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})$"
                  },
                  "location": {
                    "type": "string",
                    "description": "An object with the location information for this status change.",
                    "example": "37.4224764 -122.0842499",
                    "maxLength": 26,
                    "pattern": "^([-+]?\\d{1,2}[.]\\d+)\\s+([-+]?\\d{1,3}[.]\\d+)$"
                  },
                  "status": {
                    "enum": [
                      "EXTTRIG_STATUS_ON",
                      "EXTTRIG_STATUS_OFF"
                    ],
                    "type": "string",
                    "description": "The status changed-to in this status change",
                    "example": "EXTTRIG_STATUS_ON"
                  }
                }
            }

+ Response 200 (application/json)

+ Response 204

+ Response 404 (text/plain)

        Error: driverId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Update Driver Info                                        [PATCH /v1.0/drivers/{driverId}]
<a id="update_driver_info"></a>

Clients can request updates to the user info stored in the TSP's accounts for drivers by sending data to this endpoint.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    | **DENY**      | **DENY**   | ALLOW      | **DENY**   | ALLOW      |

+ Parameters
    + driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver who created this status change.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

    + Attributes (Externally Sourced Driver Info)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "ExternallySourcedDriverInfo",
                "type": "object",
                "properties": {
                  "timeOnDuty": {
                    "type": "number",
                    "description": "the hours worked on-duty by this user so far today",
                    "example": 1.5
                  },
                  "timeDriving": {
                    "type": "number",
                    "description": "the hours worked driving by this user so far today",
                    "example": 1.5
                  },
                  "timePersonalConveyance": {
                    "type": "number",
                    "description": "the hours in personal conveyance by this user so far today",
                    "example": 1.5
                  },
                  "timeYardMove": {
                    "type": "number",
                    "description": "the hours worked in yard moves by this user so far today",
                    "example": 1.5
                  },
                  "driverLicenseNumber": {
                    "type": "string",
                    "description": "the driver's license number",
                    "maxLength": 200
                  },
                  "country": {
                    "type": "string",
                    "description": "short code for the country of the driver's license",
                    "example": "CA",
                    "maxLength": 8
                  },
                  "region": {
                    "type": "string",
                    "description": "short code for the country's region/state/province/territory of the driver's license",
                    "example": "ON",
                    "maxLength": 8
                  },
                  "driverHomeTerminal": {
                    "type": "string",
                    "description": "the home terminal of the driver",
                    "maxLength": 8
                  }
                }
            }

+ Response 200 (application/json)

+ Response 204

+ Response 404 (text/plain)

        Error: driverId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Get Driver Performance Summaries                            [GET /v1.0/drivers/{driverId}/performance_summaries/{?startTime,stopTime}]
<a id="get_driver_performance_summaries"></a>

Clients can request all driver performance summaries for a specific driver within a given period of time.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    | **DENY**      | **DENY**   | **DENY**   | ALLOW      | ALLOW      |

+ Parameters
    + driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver for performance summmaries
    + startTime:`2019-04-05T02:04:16Z` (required, string) - the start-date of the search
    + stopTime: `2019-04-05T02:04:16Z` (required, string) - the stop-date of the search

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + performanceSummaries                                   (required, array[Driver Performance Summary], fixed-type) - all the Driver Performance Summary objects for this driver for the requested time period

+ Response 400 (text/plain)

        Error: startTime or stopTime parameter invalid

+ Response 404 (text/plain)

        Error: driverId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Update Driver TSP Portal Account                          [PATCH /v1.0/drivers/{driverId}/driverportaluser]
<a id="update_driver_tsp_portal_account"></a>

Clients can request updates to the TSP's portal user accounts for drivers by sending data to this endpoint.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    | **DENY**      | **DENY**   | **DENY**   | ALLOW      | ALLOW      |

+ Parameters
    + driverId          : `63A9F0EA7BB98050796B649E85481845` (required, string) - The id of the driver who created this status change.

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

    + Attributes (External TSP Portal User Management)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "ExternalTSPPortalUserManagement",
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "TSP portal username",
                    "example": "joe2"
                  },
                  "password": {
                    "type": "string",
                    "description": "user password",
                    "maxLength": 200
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "this user is enabled or disabled",
                    "example": true
                  }
                }
              }

+ Response 200 (application/json)

+ Response 204

+ Response 404 (text/plain)

        Error: driverId Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

# Group Data Qualities

## Get Data Qualities Statement                                [GET /v1.0/dataquality]
<a id="get_data_qualities_statement"></a>

Clients can request details on the expected latencies, sample rate, sampling method, precisions and other data qualities
of this service. Implementors are free to return difference values for different customer accounts; however, it is
expected that the response to requests on this endpoint does not vary with time.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | ALLOW      | ALLOW      | ALLOW      | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Data Qualities)

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

# Group State of Health

## Check Current State of Health                               [GET /v1.0/health/current]
<a id="check_current_state_of_health"></a>

Clients can request the current service state of health. The response to this query will be a data structure indicating
everything is good or showing some details as to why the service is not presently at 100%.

Clients must treat any response other than code 200, code 401, or code 429 as equivalent to `SERVICESTATUS_MAJOR_OUTAGE`.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | ALLOW      | ALLOW      | ALLOW      | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (State of Health)

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Check Past 30d State of Health                              [GET /v1.0/health/recents]
<a id="check_past_30d_state_of_health"></a>

Clients can request the recent history of all service statuses. The response to this query will return all service
status records (i.e. those returned via [Check Current State of Health](#check_current_state_of_health)) from over th
past 30 days.

Clients must treat any response other than code 200, code 401, or code 429 as equivalent to `SERVICESTATUS_MAJOR_OUTAGE`.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | ALLOW      | ALLOW      | ALLOW      | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + data (array[State of Health], fixed-type)

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

# Group Localization

## Translation Table                                               [/v1.0/i18n]

Based on [LinguiJS formats](https://lingui.js.org/ref/catalog-formats.html); where the preferred format is gettext PO
files, which are closely represented here. Unfortunately the Lingui JS raw format and JSON formats cannot be represented
in API Blueprint's formal spec language.

+ Attributes (object)
    + data (array[Token Translation], fixed-type)

### Get a Translation Table                                    [GET]
<a id="get_a_translation_table"></a>

Clients can retrieve the current translation table for this TSP's Open Telematics API for given language (provided in
the request headers.)

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | ALLOW      | ALLOW      | ALLOW      | ALLOW      |

+ Request
    + Headers

            Accept-Language: en
            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + data (array[Token Translation], fixed-type)

    + Body

            {
                "data": [{
                        "origin": "User Identifier",
                        "msgid":  "USERTYPE_DRIVER",
                        "msgstr": "this user is a driver; the `userId` field is a `driverId`"
                    },
                    {
                        "origin": "User Identifier",
                        "msgid":  "USERTYPE_SUPPORT",
                        "msgstr": "this user is support personnel; the `userId` field is an opaque identifier which is proprietary to the TSP"
                    },
                    {
                        "origin": "Log Event, distanceUnits",
                        "msgid":  "DISTANCEUNITS_MILES",
                        "msgstr": "distance measured in miles (mi)"
                    },
                    {
                        "origin": "Log Event, distanceUnits",
                        "msgid":  "DISTANCEUNITS_KILOMETRES",
                        "msgstr": "distance measured in kilometres (km)"
                    },
                    {
                        "origin": "Log Event, origin",
                        "msgid": "ORIGIN_AUTOMATIC",
                        "msgstr": "Automatic recorded by device"
                    },
                    {
                        "origin": "Log Event, origin",
                        "msgid": "ORIGIN_MANUAL",
                        "msgstr": "Manual entry by driver"
                    },
                    {
                        "origin": "Log Event, origin",
                        "msgid": "ORIGIN_OTHERUSER",
                        "msgstr": "Other authenticated user"
                    },
                    {
                        "origin": "Log Event, origin",
                        "msgid": "ORIGIN_UNASSIGNED",
                        "msgstr": "Unassigned driver"
                    },
                    {
                        "origin": "Log Event, state",
                        "msgid": "STATE_ACTIVE",
                        "msgstr": "The log is active and has been accepted by the driver."
                    },
                    {
                        "origin": "Log Event, state",
                        "msgid": "STATE_INACTIVE",
                        "msgstr": "The log is inactive. It has been removed or it is the modification history of a log."
                    },
                    {
                        "origin": "Log Event, state",
                        "msgid": "STATE_REJECTED",
                        "msgstr": "The log is a rejected edit request from another user."
                    },
                    {
                        "origin": "Log Event, state",
                        "msgid": "STATE_REQUESTED",
                        "msgstr": "The log is a pending edit request from another user."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_EXEMPTION_ADVERSEWEATHER",
                        "msgstr": "Adverse weather and driving conditions exemption."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_CERTIFICATION",
                        "msgstr": "Driver certification event, can be multiple -- see `certificationCount`"
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DEVICE_CONNECTED",
                        "msgstr": "System log for device power connection."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DUTY_D",
                        "msgstr": "Drive status."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_MALFUNCTION_DATARECORDINGCOMPLIANCE",
                        "msgstr": "Storage capacity is reached, or missing data elements exist."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_MALFUNCTION_DATATRANSFERCOMPLIANCE",
                        "msgstr": "Transfer of data fails to complete."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DEVICE_DISCONNECTED",
                        "msgstr": "System log for device power disconnection."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_ENGINE_POWERUP",
                        "msgstr": "Engine power up record."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_ENGINE_SHUTDOWN",
                        "msgstr": "Engine shutdown record."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_MALFUNCTION_ENGINESYNCCOMPLIANCE",
                        "msgstr": "Occurs when engine information (power, motion, km, and hours) cannot be obtained by ELD."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_EXEMPTION_16H",
                        "msgstr": "Exemption 16 hour."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_EXEMPTION_OFFDUTYDEFERRAL",
                        "msgstr": "Exemption off duty deferral."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_INTERMEDIATE",
                        "msgstr": "Intermediate Log Event."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DRIVER_LOGIN",
                        "msgstr": "User login record."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DRIVER_LOGOFF",
                        "msgstr": "User logout record."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DIAGNOSTIC_MISSINGELEMENT",
                        "msgstr": "Missing data elements."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DIAGNOSTIC_POWERDATA",
                        "msgstr": "Power data diagnostic event"
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DIAGNOSTIC_ENGINESYNCDATA",
                        "msgstr": "Engine synchronization data diagnostic"
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DIAGNOSTIC_DATATRANSFERDATA",
                        "msgstr": "Data transfer data diagnostic event"
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DIAGNOSTIC_OTHER",
                        "msgstr": "Other identified diagnostic event"
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DIAGNOSTIC_NONE",
                        "msgstr": "Clear previous instance of Diagnostic"
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DUTY_OFF",
                        "msgstr": "Off-duty status."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DUTY_ON",
                        "msgstr": "On-duty status."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_MALFUNCTION_OTHERCOMPLIANCE",
                        "msgstr": "Other instances of Malfunction."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_MALFUNCTION_NONE",
                        "msgstr": "Clear previous instances of Malfunction."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_INDICATION_PC",
                        "msgstr": "Personal conveyance driver status."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_INDICATION_NONE",
                        "msgstr": "Cleared indication (e.g. no YM or PC or any other indication)"
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_MALFUNCTION_POSITIONINGCOMPLIANCE",
                        "msgstr": "ELD continually fails to acquire valid position measurement."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_MALFUNCTION_POWERCOMPLIANCE",
                        "msgstr": "Engine power status engages ELD within 1 minute."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DUTY_SB",
                        "msgstr": "Sleeper berth status."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_MALFUNCTION_TIMINGCOMPLIANCE",
                        "msgstr": "When ELD date and time exceeds 10 minute offset from UTC."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DIAGNOSTIC_UNIDENTIFIEDDRIVINGRECORDS",
                        "msgstr": "More than 30 minutes of driving with unidentified driving."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_DUTY_OFF_WT",
                        "msgstr": "Wait time oil well driver status."
                    },
                    {
                        "origin": "Log Event, eventType",
                        "msgid": "EVENTTYPE_INDICATION_YM",
                        "msgstr": "Yard move driver status."
                    },
                    {
                        "origin": "State of Health, status",
                        "msgid": "SERVICESTATUS_OPERATIONAL",
                        "msgstr": "the service is operational"
                    },
                    {
                        "origin": "State of Health, status",
                        "msgid": "SERVICESTATUS_DEGRADED_PERFORMANCE",
                        "msgstr": "the service is operating, but with limitations"
                    },
                    {
                        "origin": "State of Health, status",
                        "msgid": "SERVICESTATUS_PARTIAL_OUTAGE",
                        "msgstr": "there are aspects of the service which are not presently available"
                    },
                    {
                        "origin": "State of Health, status",
                        "msgid": "SERVICESTATUS_MAJOR_OUTAGE",
                        "msgstr": "the service is unavailab"
                    },
                    {
                        "origin": "Externally Trigger Duty Status Change, status",
                        "msgid": "EXTTRIG_STATUS_ON",
                        "msgstr": "The driver has changed status to on-duty"
                    },
                    {
                        "origin": "Externally Trigger Duty Status Change, status",
                        "msgid": "EXTTRIG_STATUS_OFF",
                        "msgstr": "The driver has changed status to off-duty"
                    },
                    {
                        "origin": "Vehicle Flagged Event, trigger",
                        "msgid": "FLAGGEDTYPE_ROLL_STABILITY",
                        "msgstr": "Roll stability flagged event"
                    },
                    {
                        "origin": "Vehicle Flagged Event, trigger",
                        "msgid": "FLAGGEDTYPE_SUDDEN_START",
                        "msgstr": "Sudden start flagged event"
                    },
                    {
                        "origin": "Vehicle Flagged Event, trigger",
                        "msgid": "FLAGGEDTYPE_SUDDEN_STOP",
                        "msgstr": "Sudden stop flagged event"
                    },
                    {
                        "origin": "Vehicle Flagged Event, trigger",
                        "msgid": "FLAGGEDTYPE_COLLISION",
                        "msgstr": "Collision flagged event"
                    },
                    {
                        "origin": "Vehicle Flagged Event, trigger",
                        "msgid": "FLAGGEDTYPE_ONBOARD_RECORDING",
                        "msgstr": "onboard recording flagged event"
                    },
                    {
                        "origin": "Vehicle Flagged Event, gpsQuality",
                        "msgid": "GPSQUALITY_FINELOCK",
                        "msgstr": "gps receiver had fine lock"
                    },
                    {
                        "origin": "Vehicle Flagged Event, gpsQuality",
                        "msgid": "GPSQUALITY_OTHER",
                        "msgstr": "gps receiver had fix other than fine lock"
                    },
                    {
                        "origin": "Vehicle Performance Event, particulateFilterStatus",
                        "msgid": "FILTERSTATUS_REGEN_NEEDED",
                        "msgstr": "Filter regen needed"
                    },
                    {
                        "origin": "Vehicle Performance Event, particulateFilterStatus",
                        "msgid": "FILTERSTATUS_FORCED_REGEN_WILL_HAPPEN",
                        "msgstr": "Filter forced regen will happen"
                    },
                    {
                        "origin": "Vehicle Performance Event, particulateFilterStatus",
                        "msgid": "FILTERSTATUS_ACTIVE_REGEN_START",
                        "msgstr": "Filter active regen started"
                    },
                    {
                        "origin": "Vehicle Performance Event, particulateFilterStatus",
                        "msgid": "FILTERSTATUS_PASSIVE_REGEN_START",
                        "msgstr": "Filter passive regen started"
                    },
                    {
                        "origin": "Vehicle Performance Event, particulateFilterStatus",
                        "msgid": "FILTERSTATUS_ACTIVE_REGEN_END",
                        "msgstr": "Filter active regen ended"
                    },
                    {
                        "origin": "Vehicle Performance Event, particulateFilterStatus",
                        "msgid": "FILTERSTATUS_PASSIVE_REGEN_END",
                        "msgstr": "Filter passive regen ended"
                    },
                    {
                        "origin": "Vehicle Fault Code Event",
                        "msgid": "CLEARTYPE_BYSYSTEMS",
                        "msgstr": "cleared by systems"
                    },
                    {
                        "origin": "Vehicle Fault Code Event",
                        "msgid": "CLEARTYPE_MANUALLYBACKOFFICE",
                        "msgstr": "cleared manually in backoffice"
                    },
                    {
                        "origin": "Vehicle Fault Code Event, parameterOrSubsystemIdType",
                        "msgid": "PIDORSID_PID",
                        "msgstr": "This is a PID as defined in SAE J1587"
                    },
                    {
                        "origin": "Vehicle Fault Code Event, parameterOrSubsystemIdType",
                        "msgid": "PIDORSID_SID",
                        "msgstr": "This is a SID as defined in SAE J1587"
                    },
                    {
                        "origin": "Vehicle Fault Code Event, faultType",
                        "msgid": "FAULT_TYPE_J1708",
                        "msgstr": "a fault captured from J1708 vehicle network"
                    },
                    {
                        "origin": "Vehicle Fault Code Event, faultType",
                        "msgid": "FAULT_TYPE_J1939",
                        "msgstr": "a fault captured from J1939 vehicle network"
                    },
                    {
                        "origin": "Vehicle Fault Code Event, faultType",
                        "msgid": "FAULT_TYPE_OBDII",
                        "msgstr": "a captured OBDII fault"
                    },
                    {
                        "origin": "Vehicle Location Time History",
                        "msgid": "TIMERESOLUTION_MAX",
                        "msgstr": "This is at the highest available time resolution"
                    },
                    {
                        "origin": "Vehicle Location Time History",
                        "msgid": "TIMERESOLUTION_NOT_MAX",
                        "msgstr": "This is not at the highest available time resolution"
                    },
                    {
                        "origin": "Data Qualities, samplingMethod",
                        "msgid": "SAMPLING_PERIODIC",
                        "msgstr": "regular/periodic sampling"
                    },
                    {
                        "origin": "Data Qualities, samplingMethod",
                        "msgid": "SAMPLING_CHANGE",
                        "msgstr": "change/event based sampling"
                    },
                    {
                        "origin": "Vehicle Flagged Event, ignitionStatus",
                        "msgid": "IGNITION_STATUS_ACCESSORY",
                        "msgstr": "ignition accessory state"
                    },
                    {
                        "origin": "Vehicle Flagged Event, ignitionStatus",
                        "msgid": "IGNITION_STATUS_RUN_CONTACT",
                        "msgstr": "ignition run contact state"
                    },
                    {
                        "origin": "Vehicle Flagged Event, ignitionStatus",
                        "msgid": "IGNITION_STATUS_CRANK_CONTACT",
                        "msgstr": "ignition crank contact state"
                    },
                    {
                        "origin": "Vehicle Flagged Event, ignitionStatus",
                        "msgid": "IGNITION_STATUS_AID_CONTACT",
                        "msgstr": "ignition aid contact state"
                    },
                    {
                        "origin": "Vehicle Flagged Event, ignitionStatus",
                        "msgid": "IGNITION_STATUS_OFF",
                        "msgstr": "ignition off state"
                    },
                    {
                        "origin": "Data Qualities, vehicleSpeedSource",
                        "msgid": "SPEED_SOURCE_ECM",
                        "msgstr": "the vehicle speed reported in TSP data is from the ECMs of the vehicle"
                    },
                    {
                        "origin": "Data Qualities, vehicleSpeedSource",
                        "msgid": "SPEED_SOURCE_GPS",
                        "msgstr": "the vehicle speed reported in TSP data is from GPS"
                    }
                ]
            }

+ Response 406

        Language requested in Accept-Language header is unavailable

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

# Group Data Export

***On Data Import***

The carriers would also like to be able to use the exported data in an 'import' to a second TSP or new instances of the
same TSP. This is not an use case which this specification will attempt to support; however, we will aim to design the
data structures such that any TSP wanting to implement _import_ is enabled to do so (c.f. 'Provider ID').

***PII Separation***

The carriers need to be able to deploy systems which do not touch PII -- as is treated in the Authorization section
above. OTAPI implementations must provide for export of both [Vehicle-Only Telematics Export Format](#vehicle_only_telematics_export_format)
and [Complete Telematics Export Format](#complete_telematics_export_format) objects so that systems which must be separated
from PII can download the [Vehicle-Only Telematics Export Format](#vehicle_only_telematics_export_format) type. As is
noted in the access controls below, requests for these data types deny access by the *Vehicle X* roles.

***Polling for Daily Files***

The IT staff and automated systems that want to retrieve the data exports on a daily basis will do so by polling the
server for the status of the given's days complete record. The polling endpoint will either indicate that the file is
not yet ready, or respond with a redirect to a location serving the complete file (statically).

Implementors are free to make the files available for download from any service they choose. If the service hosting the
files for download exposes endpoints under that of the OTAPI endpoints then the same authentication and authorization
schemes must be enforced. If the files are made available for download elsewhere then they must not be made accessible
without any authentication or authorization and the client is expected to be configured with the appropriate credentials
for download independently of responses from the OTAPI server.

***Time-base for Data Export***

Note that the data export files will include both time-varying objects (those that have time associated with them) and
also those that do not.

* For time-varying objects: the files will only include whose associated time periods have an intersection with the
requested time period (as per the details of the [Working With Dates](#working_with_dates) section above);

* For non time-varying objects: the files will include all objects known to the TSP at the time of the request,
regardless of the time period requested as defined by `start` and `stop` query parameters (included on the endpoints for
API consistency under `/export/...`)

Furthermore, the event and object times considered in the time queries for data export use *received times* (as opposed
the default policy of relying on *creation times*). These are the times when the event or object was received, recorded
and/or made available by the OTAPI server. This could pose problems for processing exported data for RODS compliance as
multiple files may need to be processed in high-latency situations; however, the alternative is allow for data loss in
the daily export files.

***Complete Data Export***

The *Complete* objects will contain sets of all of the following objects embedded.

* [Vehicle](#vehicle_object)
* [Vehicle Location Time](#vehicle_location_time_object)
* [Vehicle Flagged Event](#vehicle_flagged_event_object)
* [Vehicle Performance Event](#vehicle_performance_event_object)
* [Stop Geographic Details](#stop_geographic_details_object)
* [Vehicle Status Event](#vehicle_status_event)
* [Vehicle Fault Code Event](#vehicle_fault_code_event_object)
* [Driver](#driver_object)
* [Log Event](#log_event_object)
* [Region Specific Break Rules](#region_specific_break_rules_object)
* [Region Specific Waivers](#region_specific_waivers_object)
* [Driver Performance Summary](#driver_performance_summary_object)
* [Message Receipt](#message_receipts)
* [Dispatch Message](#dispatch_message)
* [State of Health](#state_of_health_object)

***Vehicle-Only Data Export***

The *Vehicle-Only* objects will contain sets of all of the following objects embedded.

* [Vehicle](#vehicle_object)
* [Vehicle Location Time](#vehicle_location_time_object)
* [Vehicle Flagged Event](#vehicle_flagged_event_object)
* [Vehicle Performance Event](#vehicle_performance_event_object)
* [Stop Geographic Details](#stop_geographic_details_object)
* [Vehicle Status Event](#vehicle_status_event)
* [Vehicle Fault Code Event](#vehicle_fault_code_event_object)
* [State of Health](#state_of_health_object)

## Complete Telematics Export Format                               [/v1.0/export/allrecords/status{?dayOf}]
<a id="complete_telematics_export_format"></a>

+ Parameters
    + dayOf:    `2019-04-05T02:04:16Z` (required, string) - the day of interest, specified by any timestamp within that day, including 0000h

+ Attributes (Complete Telematics Records)

### Test if Complete Export Ready                              [GET]
<a id="test_if_complete_export_ready"></a>

If the file is ready the response will include a URL where the complete file can be fetched; if the file is not yet
ready then a `202` return code will be returned.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | **DENY**    | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + location: `https://api.provider.com/v1.0/export/allrecords/files/d8603741fd48a71cbf8546b04c9bc9f8` (required, string) - a URL where the complete file can be retrieved. If it is under that of the OTAPI endpoints then the same authentication and authorization schemes must be enforced. If the files are made available for download elsewhere then they must not be made accessible without any authentication or authorization and the client is expected to be configured with the appropriate credentials for download independently of responses from the OTAPI server.

+ Response 202

        File not yet ready for download

+ Response 400 (text/plain)

        Error: dayOf parameter invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Vehicle-Only Telematics Export Format                           [/v1.0/export/vehiclerecords/status{?dayOf}]
<a id="vehicle_only_telematics_export_format"></a>

+ Parameters
    + dayOf:    `2019-04-05T02:04:16Z` (required, string) - the day of interest, specified by any timestamp within that day, including 0000h

+ Attributes (Vehicle Only Complete Telematics Records)

### Test if Vehicle-Only Export Ready                          [GET]
<a id="test_if_vehicle_only_export_ready"></a>

If the file is ready the response will include a URL where the complete file can be fetched; if the file is not yet
ready then a `202` return code will be returned.

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | **DENY**     | **DENY**   | **DENY**    | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (object)
        + location: `https://api.provider.com/v1.0/export/vehiclerecords/files/d8603741fd48a71cbf8546b04c9bc9f8` (required, string) - a URL where the complete file can be retrieved. If it is under that of the OTAPI endpoints then the same authentication and authorization schemes must be enforced. If the files are made available for download elsewhere then they must not be made accessible without any authentication or authorization and the client is expected to be configured with the appropriate credentials for download independently of responses from the OTAPI server.

+ Response 202

        File not yet ready for download

+ Response 400 (text/plain)

        Error: dayOf parameter invalid

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 413

        Requested entity is too large

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

# Group Open Telematics Data Model

For the purposes of clearly detailing the data object types used by the API endpoints above, we include the object
models here along with simple 'get by id' APIs. These simple APIs could be useful for debugging and inspection purposes;
it is expected that the 'use case based' API endpoints defined above will be of more use in integration than these.

## Log Event Object                                                [/v1.0/event_logs/{id}]
<a id="log_event_object"></a>

+ Parameters
    + id            (string) - ID of the Log Event of interest

+ Attributes (Log Event)

### Get a Log Event by its ID                                  [GET]
<a id="get_a_log_event_by_its_ID"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Log Event)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Driver Object                                                   [/v1.0/drivers/{id}]
<a id="driver_object"></a>

+ Parameters
    + id            (string) - ID of a Driver object

+ Attributes (Driver)

### Get a Driver Object by its ID                              [GET]
<a id="get_a_driver_object_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Driver)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Vehicle Object                                                  [/v1.0/vehicles/{id}]
<a id="vehicle_object"></a>

+ Parameters
    + id            (string) - ID of a Vehicle object

+ Attributes (Vehicle)


### Get a Vehicle Object by its ID                             [GET]
<a id="get_a_vehicle_object_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Vehicle)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Message Receipt Object                                          [/v1.0/message_receipts/{id}]
<a id="message_receipt_object"></a>

+ Parameters
    + id            (string) - ID of a Message Receipt object

+ Attributes (Message Receipt)


### Get a Message Receipt by its ID                            [GET]
<a id="get_a_message_receipt_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | ALLOW         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Message Receipt)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Dispatch Message Object                                         [/v1.0/dispatch_message/{id}]
<a id="dispatch_message_object"></a>

+ Parameters
    + id            (string) - ID of a Dispatch Message object

+ Attributes (Dispatch Message)


### Get a Dispatch Message by its ID                            [GET]
<a id="get_a_dispatch_message_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | Allow         | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Dispatch Message)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}


## Region Specific Break Rules Object                              [/v1.0/region_specific_breaks/{id}]
<a id="region_specific_break_rules_object"></a>

Rules governing driver brakes for the specific region of governance of the driver in question. The rules are defined
only by the region that is dictating the rules, clients are expected to interpret the region to realize specific break
rules.

+ Parameters
    + id            (string) - ID of the Region Specific Break Rules of interest

+ Attributes (Region Specific Break Rules)

### Get a Region Specific Break Rules by its ID                [GET]
<a id="get_a_region_specific_break_rules_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Region Specific Break Rules)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Region Specific Waivers Object                                  [/v1.0/region_specific_waivers/{id}]
<a id="region_specific_waivers_object"></a>

Waivers and exceptions for the specific region of governance of the driver in question. One entity per day of a waiver
available

+ Parameters
    + id            (string) - ID of the Region Specific Waivers of interest

+ Attributes (Region Specific Waivers)

### Get a Region Specific Waivers by its ID                    [GET]
<a id="get_a_region_specific_waivers_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Region Specific Waivers)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Stop Geographic Details Object                                  [/v1.0/stops/{id}]
<a id="stop_geographic_details_object"></a>

*Stop Geographic Details* are the specific location for the truck and trailer to park and a polygon of geographic points
indicating the entryway onto a facility (i.e. where the truck should drive on approach).

+ Parameters
    + id            (string) - ID of the Stop Geographic Details of interest

+ Attributes (Stop Geographic Details)

### Get a Stop Geographic Details by its ID                    [GET]
<a id="get_a_stop_geographic_details_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Stop Geographic Details)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Vehicle Location Time Object                                    [/v1.0/fleet/locations/{id}]
<a id="vehicle_location_time_object"></a>

+ Parameters
    + id            (string) - ID of the Vehicle Location Time of interest

+ Attributes (Vehicle Location Time)

### Get a Vehicle Location Time by its ID                      [GET]
<a id="get_a_vehicle_location_time_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Vehicle Location Time)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Vehicle Flagged Event Object                                    [/v1.0/fleet/flagged_events/{id}]
<a id="vehicle_flagged_event_object"></a>

The purpose of the flagged events is to flag potential saftey issues for motor freight carrier staff to validate

+ Parameters
    + id            (string) - ID of the Vehicle Flagged Event of interest

+ Attributes (Vehicle Flagged Event)

### Get a Vehicle Flagged Event by its ID                      [GET]
<a id="get_a_vehicle_flagged_event_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Vehicle Flagged Event)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Vehicle Status Event Object                                 [/v1.0/fleet/statusevents/{id}]
<a id="vehicle_status_event_object"></a>

+ Parameters
    + id            (string) - ID of the Vehicle Status Event of interest

+ Attributes (Vehicle Status Event)

### Get a Vehicle Status Event by its ID                   [GET]
<a id="get_a_vehicle_status_event_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Vehicle Status Event)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Vehicle Fault Code Event Object                                 [/v1.0/fleet/faults/{id}]
<a id="vehicle_fault_code_event_object"></a>

+ Parameters
    + id            (string) - ID of the Vehicle Fault Code Event of interest

+ Attributes (Vehicle Fault Code Event)

### Get a Vehicle Fault Code Event by its ID                   [GET]
<a id="get_a_vehicle_fault_code_event_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Vehicle Fault Code Event)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Flagged Vehicle Fault Code Event Object                         [/v1.0/fleet/flagged_faults/{id}]
<a id="flagged_vehicle_fault_code_event_object"></a>

+ Parameters
    + id            (string) - ID of the Flagged Vehicle Fault Code Event of interest

+ Attributes (Flagged Vehicle Fault Code Event)

### Get a Flagged Vehicle Fault Code Event by its ID           [GET]
<a id="get_a_flagged_vehicle_fault_code_event_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Flagged Vehicle Fault Code Event)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Vehicle Performance Event Object                                [/v1.0/fleet/performance_events/{id}]
<a id="vehicle_performance_event_object"></a>

+ Parameters
    + id            (string) - ID of the Vehicle Performance Event of interest

+ Attributes (Vehicle Performance Event)

### Get a Vehicle Performance Event by its ID                  [GET]
<a id="get_a_vehicle_performance_event_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | **DENY**   | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Vehicle Performance Event)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## Driver Performance Summary Object                               [/v1.0/driver_performance_summaries/{id}]
<a id="driver_performance_summary_object"></a>

Summary statistics on performance of drivers.

+ Parameters
    + id            (string) - ID of the Driver Performance Summary of interest

+ Attributes (Driver Performance Summary)

### Get a Driver Performance Summary by its ID                 [GET]
<a id="get_a_driver_performance_summary_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       | **DENY**      | **DENY**   | ALLOW      | ALLOW      | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (Driver Performance Summary)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}

## State of Health Object                                          [/v1.0/health/{id}]
<a id="state_of_health_object"></a>

+ Parameters
    + id            (string) - ID of the State of Health object of interest

+ Attributes (State of Health)

### Get a State of Health by its ID                 [GET]
<a id="get_a_state_of_health_by_its_id"></a>

**Access Controls**


|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |S&C         |Admin       |
|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|------------|
|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | ALLOW      | ALLOW      | ALLOW      | ALLOW      |

+ Request
    + Headers

            Authorization: Basic YWRtaW46YWRtaW4=

+ Response 200 (application/json)
    + Attributes (State of Health)

+ Response 404 (text/plain)

        Error: id Not Found

+ Response 401
    + Body

            Authentication Required
    + Headers

            WWW-Authenticate: Basic realm="protected"

+ Response 429
    + Body

            Too Many Requests
    + Headers

            Retry-After: {implementation-defined}
